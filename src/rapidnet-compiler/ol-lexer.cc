#line 2 "src/rapidnet-compiler/ol-lexer.cc"

#line 4 "src/rapidnet-compiler/ol-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer OLBaseFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *OLBasealloc (yy_size_t  );
void *OLBaserealloc (void *,yy_size_t  );
void OLBasefree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int OlLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 70
#define YY_END_OF_BUFFER 71
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[223] =
    {   0,
       71,   70,    1,   70,   46,   70,    8,   70,   39,   70,
       41,   70,   21,   70,   22,   70,   37,   70,   35,   70,
       20,   70,   36,   70,   50,   70,   38,   70,   67,   70,
       67,   70,   27,   70,   28,   70,   70,   29,   70,   19,
       70,   62,   70,   62,   70,   62,   70,   62,   70,   23,
       70,   24,   70,   40,   70,   63,   70,   65,   70,   65,
       70,   65,   70,   65,   70,   65,   70,   65,   70,   65,
       70,   65,   70,   65,   70,   65,   70,   65,   70,   65,
       70,   25,   70,   42,   70,   26,   70,   43,   70,   70,
        6,   70,   70,   11,   70,    9,   70,   70,    1,   32,

        2,   47,   67,    5,    3,   67,   66,   51,   49,   45,
       30,   33,   34,   31,   44,   62,   16,   62,   62,   62,
       65,   65,   65,   65,   65,   18,   65,   17,   65,   65,
       65,   65,   65,   65,   65,   65,   48,    4,    6,    6,
        7,   11,   10,    2,    3,   68,   68,   67,   62,   62,
       60,   65,   65,   65,   61,   65,   65,   65,   65,   65,
       65,   65,   65,   65,    4,   69,   62,   62,   65,   65,
       65,   13,   65,   65,   59,   65,   14,   65,   65,   65,
       65,   68,   58,   62,   62,   65,   65,   65,   65,   54,
       65,   56,   65,   52,   65,   62,   57,   65,   65,   65,

       65,   65,   62,   65,   65,   65,   65,   62,   15,   65,
       64,   65,   65,   53,   65,   62,   65,   55,   62,   65,
       12,   65
    } ;

static yyconst flex_int16_t yy_accept[174] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    5,
        7,    9,   11,   13,   15,   17,   19,   21,   23,   25,
       27,   29,   31,   33,   35,   37,   38,   40,   42,   44,
       46,   48,   50,   52,   54,   56,   58,   60,   62,   64,
       66,   68,   70,   72,   74,   76,   78,   80,   82,   84,
       86,   88,   90,   91,   93,   94,   96,   98,   99,  100,
      101,  102,  103,  104,  105,  106,  106,  107,  107,  108,
      108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
      119,  120,  121,  122,  123,  124,  125,  126,  128,  130,
      131,  132,  133,  134,  135,  136,  137,  138,  139,  140,

      141,  142,  143,  144,  145,  146,  147,  147,  148,  149,
      150,  151,  153,  154,  155,  157,  158,  159,  160,  161,
      162,  163,  164,  165,  166,  166,  166,  167,  168,  169,
      170,  171,  172,  174,  175,  177,  179,  180,  181,  182,
      182,  183,  185,  186,  187,  188,  189,  190,  192,  194,
      196,  197,  199,  200,  201,  202,  203,  204,  205,  206,
      207,  208,  209,  211,  213,  214,  216,  217,  218,  220,
      221,  223,  223
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
       21,   22,    1,   23,   24,   25,   25,   25,   26,   25,
       27,   27,   28,   27,   27,   27,   27,   27,   27,   27,
       29,   27,   27,   30,   31,   27,   27,   32,   27,   27,
       33,   34,   35,   36,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   47,   54,   55,   56,   57,   47,   58,   59,
       60,   61,   62,   63,   64,   65,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[66] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    4,    1,    1,
        1,    1,    1,    4,    4,    4,    5,    5,    5,    5,
        5,    5,    1,    3,    1,    1,    5,    4,    4,    4,
        4,    4,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[186] =
    {   0,
        0,  261,  255,  254,   61,   62,  264,  268,   66,  242,
      268,  255,  253,  268,  268,  268,  268,  268,   53,  268,
       61,   58,   68,   60,   58,  239,   66,  268,  203,    0,
      201,  203,  268,  268,  268,  268,  219,    0,  213,  203,
      216,   41,  210,  213,  193,   53,  195,  210,  268,  184,
      268,  268,  242,  268,   82,    0,  268,    0,   99,  268,
        0,  268,   88,  268,    0,   90,   98,  108,  268,    0,
      268,  268,  268,  268,  268,  268,  268,  268,    0,    0,
      203,  206,    0,  206,  193,  201,  203,    0,  196,  178,
      181,  187,  175,  196,  195,  176,  268,    0,  268,  107,

      268,    0,  268,    0,    0,  110,   94,  114,  106,  177,
      190,  192,  186,  173,  189,  179,  169,  181,  173,  166,
      176,  179,  178,    0,  122,  127,  268,  157,  174,  159,
      154,  162,    0,  158,    0,    0,  169,  168,  164,  125,
      129,    0,  178,  165,  153,  159,  158,    0,    0,  153,
      164,    0,  145,  141,  150,  131,  139,  119,   91,  101,
      108,   99,    0,    0,   89,    0,   79,   58,    0,   62,
        0,  268,  152,  157,  159,  161,  166,  171,  176,  181,
      186,   93,  188,  190,  195
    } ;

static yyconst flex_int16_t yy_def[186] =
    {   0,
      172,    1,  173,  173,  174,  174,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  175,  175,
      175,  175,  172,  172,  172,  172,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  172,  172,
      172,  172,  172,  172,  177,  178,  172,  179,  172,  172,
      180,  172,  172,  172,  181,  172,  172,  172,  172,  182,
      172,  172,  172,  172,  172,  172,  172,  172,  175,  175,
      175,  175,  176,  183,  176,  176,  184,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  172,  185,  172,  172,

      172,  178,  172,  180,  181,  172,  172,  172,  182,  175,
      175,  183,  176,  176,  184,  176,  176,  176,  176,  176,
      176,  176,  176,  185,  172,  172,  172,  175,  175,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  172,
      172,  175,  175,  176,  176,  176,  176,  176,  176,  176,
      175,  176,  176,  176,  176,  176,  175,  176,  176,  176,
      176,  175,  176,  176,  176,  176,  175,  176,  175,  176,
      176,    0,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172
    } ;

static yyconst flex_int16_t yy_nxt[334] =
    {   0,
        8,    9,    9,   10,   11,    8,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   30,   30,   30,   31,   32,
       30,   30,   33,    8,   34,   35,   36,   37,   38,   38,
       39,   40,   41,   38,   38,   42,   38,   43,   38,   44,
       45,   38,   38,   38,   46,   47,   38,   48,   38,   38,
       38,   49,   50,   51,   52,   57,   57,   59,   59,   63,
       63,   64,   66,   71,   67,   67,   65,   73,   74,   75,
       72,   88,   66,   68,   67,   67,   77,   78,   69,   70,
       93,   89,  100,   68,   58,   58,  109,  101,   69,   68,

       59,   59,   66,  171,   63,   63,  106,  106,   94,   68,
      108,  108,   66,   68,   67,   67,   70,  125,  170,  107,
      169,  107,  101,   68,  108,  108,  106,  106,   69,   68,
      108,  108,  125,  127,  168,  126,   69,  101,  140,   68,
      140,  141,  141,  141,  141,  141,  141,  167,  166,  165,
      164,  126,   54,   54,   54,   54,   54,   56,   56,   56,
       56,   56,   79,   79,   83,   83,   99,   99,   99,   99,
       99,  102,  102,  163,  102,  102,  103,  162,  103,  103,
      103,  104,  161,  104,  104,  104,  105,  160,  105,  105,
      105,  112,  112,  115,  115,  124,  159,  124,  124,  124,

      158,  157,  156,  155,  154,  153,  152,  151,  150,  149,
      148,  147,  146,  145,  144,  143,  142,  139,  138,  137,
      136,  135,  134,  133,  132,   83,  131,  130,   83,  129,
      128,  123,  122,  121,  120,  119,  118,  117,  116,   83,
      114,  113,   83,  111,  110,   98,   97,   96,   95,   92,
       91,   90,   87,   86,   85,   84,   82,   81,   80,   76,
       62,   61,   60,  172,   55,   55,   53,    7,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172
    } ;

static yyconst flex_int16_t yy_chk[334] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    5,    6,    9,    9,   19,
       19,   21,   22,   24,   22,   22,   21,   25,   25,   25,
       24,   42,   23,   22,   23,   23,   27,   27,   22,   22,
       46,   42,   55,   23,    5,    6,  182,   55,   23,   22,

       59,   59,   63,  170,   63,   63,   66,   66,   46,   23,
      107,  107,   67,   63,   67,   67,   22,  100,  168,   68,
      167,   68,  100,   67,   68,   68,  106,  106,   67,   63,
      108,  108,  125,  109,  165,  106,  109,  125,  126,   67,
      126,  140,  140,  126,  126,  141,  141,  162,  161,  160,
      159,  106,  173,  173,  173,  173,  173,  174,  174,  174,
      174,  174,  175,  175,  176,  176,  177,  177,  177,  177,
      177,  178,  178,  158,  178,  178,  179,  157,  179,  179,
      179,  180,  156,  180,  180,  180,  181,  155,  181,  181,
      181,  183,  183,  184,  184,  185,  154,  185,  185,  185,

      153,  151,  150,  147,  146,  145,  144,  143,  139,  138,
      137,  134,  132,  131,  130,  129,  128,  123,  122,  121,
      120,  119,  118,  117,  116,  115,  114,  113,  112,  111,
      110,   96,   95,   94,   93,   92,   91,   90,   89,   87,
       86,   85,   84,   82,   81,   53,   50,   48,   47,   45,
       44,   43,   41,   40,   39,   37,   32,   31,   29,   26,
       13,   12,   10,    7,    4,    3,    2,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,

      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
      172,  172,  172
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[71] =
    {   0,
1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "src/rapidnet-compiler/ol-lexer.lex"
/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2009 University of Pennsylvania
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

#line 27 "src/rapidnet-compiler/ol-lexer.lex"
#include "ol-lexer.h"

#include <limits.h>
#include <stdlib.h>

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet_compiler;

#ifdef YY_DECL
#undef YY_DECL
#endif
#define YY_DECL int OlLexer::yylex (YYSTYPE *lvalp, OlContext *ctxt)

int dcvar = 0;

#line 638 "src/rapidnet-compiler/ol-lexer.cc"

#define INITIAL 0
#define CCOMMENT 1
#define CSTRING 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 56 "src/rapidnet-compiler/ol-lexer.lex"


#line 746 "src/rapidnet-compiler/ol-lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)OLBasealloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 173 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 268 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case YY_STATE_EOF(INITIAL):
#line 58 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_EOF; }
	YY_BREAK
case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 59 "src/rapidnet-compiler/ol-lexer.lex"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "src/rapidnet-compiler/ol-lexer.lex"
; // Ignore %% comments
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "src/rapidnet-compiler/ol-lexer.lex"
; // Ignore // comments
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "src/rapidnet-compiler/ol-lexer.lex"
; // Ignore '#' directives
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "src/rapidnet-compiler/ol-lexer.lex"
{ 
  if ( comment_depth == 0 ) {
    BEGIN(CCOMMENT); 
  }
  ++comment_depth;
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 71 "src/rapidnet-compiler/ol-lexer.lex"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 72 "src/rapidnet-compiler/ol-lexer.lex"
{
  if ( comment_depth > 0 ) {
   if( --comment_depth == 0 ) {
     BEGIN(INITIAL);
   }
 } else {
   REJECT;
 }
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 81 "src/rapidnet-compiler/ol-lexer.lex"
{ 
  assert(cstring == NULL);
  cstring = new ostringstream();
  BEGIN(CSTRING); 
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "src/rapidnet-compiler/ol-lexer.lex"
{ 
  assert(cstring != NULL);
  lvalp->v = new ParseVal(ValStr::New(cstring->str()));
  delete cstring;
  cstring = NULL;
  BEGIN(INITIAL); 
  return OL_STRING; 
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "src/rapidnet-compiler/ol-lexer.lex"
{
  assert(cstring != NULL);
  // An escaped character literal
  switch (yytext[1]) {
  case 'n': (*cstring) << "\n"; break;
  case 'r': (*cstring) << "\r"; break;
  case 't': (*cstring) << "\t"; break;
  case 'f': (*cstring) << "\f"; break;
  default: (*cstring) << yytext[1]; break;
  }
}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 105 "src/rapidnet-compiler/ol-lexer.lex"
{ 
    assert(cstring != NULL);
    (*cstring) << yytext; 
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 110 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_MATERIALIZE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 111 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_KEYS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 112 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_SAYS; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 113 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_ENCRYPTS; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 114 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_CONTEXT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 115 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_IN; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 116 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_ID; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 117 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_AT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 118 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 119 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_LPAR; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 120 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_RPAR; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 121 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_LSQUB; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 122 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_RSQUB; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 123 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_LCURB; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 124 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_RCURB; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 125 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_COLON; }
	YY_BREAK
/* Relational operators */
case 28:
YY_RULE_SETUP
#line 128 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_LT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 129 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_GT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 130 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_LTE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 131 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_GTE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 132 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_NEQ; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 133 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_NEQ; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 134 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_EQ; }
	YY_BREAK
/* Arithmetic operations */
case 35:
YY_RULE_SETUP
#line 137 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_PLUS; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 138 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_MINUS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 139 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_TIMES; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 140 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_DIVIDE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 141 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_MODULUS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 142 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_BITXOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 143 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_BITAND; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 144 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_BITOR; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 145 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_BITNOT; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 146 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_RSHIFT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 147 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_LSHIFT; }
	YY_BREAK
/* Boolean operations */
case 46:
YY_RULE_SETUP
#line 150 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_NOT; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 151 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_AND; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 152 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_OR; } 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 154 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_ASSIGN; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 155 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_DOT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 156 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_IF; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 157 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_WATCH; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 158 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_WATCHFINE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 159 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_STAGE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 160 "src/rapidnet-compiler/ol-lexer.lex"
{return OL_TRACETABLE;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 161 "src/rapidnet-compiler/ol-lexer.lex"
{return OL_TRACE;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 162 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_DEL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 163 "src/rapidnet-compiler/ol-lexer.lex"
{ return OL_QUERY; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 164 "src/rapidnet-compiler/ol-lexer.lex"
{ 
  lvalp->v = new ParseVal(ValNull::New()); 
  return OL_NULL; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 168 "src/rapidnet-compiler/ol-lexer.lex"
{ 
  string aggName(yytext);
  lvalp->v = new ParseVar(ValStr::New(aggName.substr(2))); 
  return OL_AGGFUNCNAME;
 }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 174 "src/rapidnet-compiler/ol-lexer.lex"
{ 
  lvalp->v = new ParseVar(ValStr::New(yytext)); 
  return OL_FUNCTION; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 178 "src/rapidnet-compiler/ol-lexer.lex"
{ 
  lvalp->v = new ParseVar(ValStr::New(yytext)); 
  return OL_VAR; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 182 "src/rapidnet-compiler/ol-lexer.lex"
{ 
  ostringstream oss;
  oss << "$_" << dcvar++; 
  lvalp->v = new ParseVar(ValStr::New(oss.str())); 
  return OL_VAR; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 188 "src/rapidnet-compiler/ol-lexer.lex"
{
  // Unsigned integer literal (including octal and/or hex)
  lvalp->v = new ParseVal(ValInt32::New(-1));
  return OL_VALUE;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 194 "src/rapidnet-compiler/ol-lexer.lex"
{ 
  lvalp->v = new ParseVal(ValStr::New(yytext)); 
  return OL_NAME; 
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 199 "src/rapidnet-compiler/ol-lexer.lex"
{
  // Unsigned integer literal (including octal and/or hex)
  lvalp->v = new ParseVal(ValUInt32::New(strtoull(yytext,NULL,0)));
  return OL_VALUE;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 205 "src/rapidnet-compiler/ol-lexer.lex"
{
  // Some integer literal (including octal and/or hex)
  lvalp->v = new ParseVal(ValInt32::New(strtoll(yytext,NULL,0)));
  return OL_VALUE;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 211 "src/rapidnet-compiler/ol-lexer.lex"
{
  // Double-precision literal
  lvalp->v = new ParseVal(ValDouble::New(strtod(yytext,NULL)));
  return OL_VALUE;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 217 "src/rapidnet-compiler/ol-lexer.lex"
{
  // IDs are read in only in hexadecimal with an I appended to the end
  string hex(yytext);
  string choppedString = hex.substr(2, hex.size() - 3);
  ParseVal *val = new ParseVal (ValId::New(choppedString));
  val->Id (true);
  lvalp->v = val;
  return OL_VALUE;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 227 "src/rapidnet-compiler/ol-lexer.lex"
ECHO;
	YY_BREAK
#line 1287 "src/rapidnet-compiler/ol-lexer.cc"
			case YY_STATE_EOF(CCOMMENT):
			case YY_STATE_EOF(CSTRING):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	OLBasefree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	OLBasefree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) OLBaserealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 173 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 173 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 172);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) OLBasealloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) OLBasealloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		OLBasefree((void *) b->yy_ch_buf  );

	OLBasefree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)OLBasealloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)OLBaserealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) OLBasealloc(new_size  );

		else
			(yy_start_stack) = (int *) OLBaserealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *OLBasealloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *OLBaserealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void OLBasefree (void * ptr )
{
	free( (char *) ptr );	/* see OLBaserealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 227 "src/rapidnet-compiler/ol-lexer.lex"



// Default: yyin == cin.
OlLexer::OlLexer(istream *str) 
  : comment_depth(0), cstring(NULL) 
{
  bufstate = yy_create_buffer( str , YY_BUF_SIZE);
  bufstate->yy_is_our_buffer = 0;
  yy_switch_to_buffer( bufstate );
};

// Give it a string...
OlLexer::OlLexer(const char *prog) 
  : comment_depth(0), cstring(NULL), strb(prog)
{
  bufstate = yy_create_buffer( &strb, strlen(prog));
  yy_switch_to_buffer( bufstate );
};

OlLexer::~OlLexer() { 
  // if (bufstate) yy_delete_buffer(bufstate); 
};

