/* A RapidNet application. Generated by RapidNet compiler. */

#include "pathvector-prov.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::pathvectorprov;

const string PathvectorProv::BESTPATH = "bestPath";
const string PathvectorProv::EPRETURN = "ePReturn";
const string PathvectorProv::EPROVQUERY = "eProvQuery";
const string PathvectorProv::ERRETURN = "eRReturn";
const string PathvectorProv::ERULEQUERY = "eRuleQuery";
const string PathvectorProv::EBESTPATH = "ebestPath";
const string PathvectorProv::EBESTPATHDELETE = "ebestPathDelete";
const string PathvectorProv::EBESTPATHTEMP = "ebestPathTemp";
const string PathvectorProv::EBESTPATHTEMPDELETE = "ebestPathTempDelete";
const string PathvectorProv::EPATH = "epath";
const string PathvectorProv::EPATHDELETE = "epathDelete";
const string PathvectorProv::EPATHTEMP = "epathTemp";
const string PathvectorProv::EPATHTEMPDELETE = "epathTempDelete";
const string PathvectorProv::LINK = "link";
const string PathvectorProv::PITERATE = "pIterate";
const string PathvectorProv::PQLIST = "pQList";
const string PathvectorProv::PRESULTTMP = "pResultTmp";
const string PathvectorProv::PRETURN = "pReturn";
const string PathvectorProv::PATH = "path";
const string PathvectorProv::PROV = "prov";
const string PathvectorProv::PROVQUERY = "provQuery";
const string PathvectorProv::RITERATE = "rIterate";
const string PathvectorProv::RQLIST = "rQList";
const string PathvectorProv::RRESULTTMP = "rResultTmp";
const string PathvectorProv::RRETURN = "rReturn";
const string PathvectorProv::RULEEXEC = "ruleExec";
const string PathvectorProv::RULEQUERY = "ruleQuery";

NS_LOG_COMPONENT_DEFINE ("PathvectorProv");
NS_OBJECT_ENSURE_REGISTERED (PathvectorProv);

TypeId
PathvectorProv::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::pathvectorprov::PathvectorProv")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<PathvectorProv> ()
    ;
  return tid;
}

PathvectorProv::PathvectorProv()
{
  NS_LOG_FUNCTION_NOARGS ();
}

PathvectorProv::~PathvectorProv()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
PathvectorProv::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
PathvectorProv::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  RAPIDNET_LOG_INFO("PathvectorProv Application Started");
}

void
PathvectorProv::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("PathvectorProv Application Stopped");
}

void
PathvectorProv::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (BESTPATH, attrdeflist (
    attrdef ("bestPath_attr1", IPV4),
    attrdef ("bestPath_attr2", IPV4)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr1", IPV4),
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (PQLIST, attrdeflist (
    attrdef ("pQList_attr1", IPV4),
    attrdef ("pQList_attr2", ID)));

  AddRelationWithKeys (PRESULTTMP, attrdeflist (
    attrdef ("pResultTmp_attr1", IPV4),
    attrdef ("pResultTmp_attr2", ID)));

  AddRelationWithKeys (PATH, attrdeflist (
    attrdef ("path_attr4", LIST)));

  AddRelationWithKeys (PROV, attrdeflist (
    attrdef ("prov_attr1", IPV4),
    attrdef ("prov_attr2", ID),
    attrdef ("prov_attr3", ID)));

  AddRelationWithKeys (RQLIST, attrdeflist (
    attrdef ("rQList_attr1", IPV4),
    attrdef ("rQList_attr2", ID)));

  AddRelationWithKeys (RRESULTTMP, attrdeflist (
    attrdef ("rResultTmp_attr1", IPV4),
    attrdef ("rResultTmp_attr2", ID)));

  AddRelationWithKeys (RULEEXEC, attrdeflist (
    attrdef ("ruleExec_attr1", IPV4),
    attrdef ("ruleExec_attr2", ID)));

  m_aggr_bestpathMinC = AggrMin::New (BESTPATH,
    this,
    attrdeflist (
      attrdeftype ("bestPath_attr1", ANYTYPE),
      attrdeftype ("bestPath_attr2", ANYTYPE),
      attrdeftype ("bestPath_attr3", ANYTYPE),
      attrdeftype ("bestPath_attr4", ANYTYPE)),
    3);

}

void
PathvectorProv::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, LINK))
    {
      Prov_r1_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      Prov_r1_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, EPATHTEMP))
    {
      Prov_r1_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPATHTEMPDELETE))
    {
      Prov_r1_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPATHTEMP))
    {
      Prov_r1_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPATHTEMPDELETE))
    {
      Prov_r1_3_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPATH))
    {
      Prov_r1_4_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPATHDELETE))
    {
      Prov_r1_4_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EPATH))
    {
      Prov_r1_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EPATHDELETE))
    {
      Prov_r1_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      Prov_r2_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      Prov_r2_1Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, BESTPATH))
    {
      Prov_r2_1Eca3Ins (tuple);
    }
  if (IsDeleteEvent (tuple, BESTPATH))
    {
      Prov_r2_1Eca3Del (tuple);
    }
  if (IsInsertEvent (tuple, BESTPATH))
    {
      Prov_r3_1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, BESTPATH))
    {
      Prov_r3_1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, EBESTPATHTEMP))
    {
      Prov_r3_2_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EBESTPATHTEMPDELETE))
    {
      Prov_r3_2_ecaDel (tuple);
    }
  if (IsRecvEvent (tuple, EBESTPATHTEMP))
    {
      Prov_r3_3_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EBESTPATHTEMPDELETE))
    {
      Prov_r3_3_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, PATH))
    {
      R3eca (tuple);
    }
  if (IsDeleteEvent (tuple, PATH))
    {
      R3eca2 (tuple);
    }
  if (IsRecvEvent (tuple, EBESTPATH))
    {
      Prov_r3_5_ecaAdd (tuple);
    }
  if (IsRecvEvent (tuple, EBESTPATHDELETE))
    {
      Prov_r3_5_ecaDel (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      Prov_edb_1Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      Prov_edb_1Eca1Del (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Edb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb1_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb2_eca (tuple);
    }
  if (IsRecvEvent (tuple, PROVQUERY))
    {
      Idb3_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb4_eca (tuple);
    }
  if (IsRecvEvent (tuple, PITERATE))
    {
      Idb5_eca (tuple);
    }
  if (IsRecvEvent (tuple, ERULEQUERY))
    {
      Idb6_eca (tuple);
    }
  if (IsRecvEvent (tuple, RRETURN))
    {
      Idb7_eca (tuple);
    }
  if (IsInsertEvent (tuple, PRESULTTMP))
    {
      Idb8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, PQLIST))
    {
      Idb8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, EPRETURN))
    {
      Idb9_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv1_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv2_eca (tuple);
    }
  if (IsRecvEvent (tuple, RULEQUERY))
    {
      Rv3_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv4_eca (tuple);
    }
  if (IsRecvEvent (tuple, RITERATE))
    {
      Rv5_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPROVQUERY))
    {
      Rv6_eca (tuple);
    }
  if (IsRecvEvent (tuple, PRETURN))
    {
      Rv7_eca (tuple);
    }
  if (IsInsertEvent (tuple, RRESULTTMP))
    {
      Rv8Eca0Ins (tuple);
    }
  if (IsInsertEvent (tuple, RQLIST))
    {
      Rv8Eca1Ins (tuple);
    }
  if (IsRecvEvent (tuple, ERRETURN))
    {
      Rv9_eca (tuple);
    }
}

void
PathvectorProv::Prov_r1_1Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("link_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("link_attr1"))));

  result->Assign (Assignor::New ("P2",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("P2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPATHTEMP,
    strlist ("RLOC",
      "link_attr1",
      "link_attr2",
      "link_attr3",
      "P",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epathTemp_attr1",
      "epathTemp_attr2",
      "epathTemp_attr3",
      "epathTemp_attr4",
      "epathTemp_attr5",
      "epathTemp_attr6",
      "epathTemp_attr7",
      "epathTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r1_1Eca0Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_r1_1Eca0Del triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("link_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("link_attr1"))));

  result->Assign (Assignor::New ("P2",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("P2"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r1"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EPATHTEMPDELETE,
    strlist ("RLOC",
      "link_attr1",
      "link_attr2",
      "link_attr3",
      "P",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epathTempDelete_attr1",
      "epathTempDelete_attr2",
      "epathTempDelete_attr3",
      "epathTempDelete_attr4",
      "epathTempDelete_attr5",
      "epathTempDelete_attr6",
      "epathTempDelete_attr7",
      "epathTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r1_2_ecaAdd (Ptr<Tuple> epathTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaAdd triggered");

  Ptr<Tuple> result = epathTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("epathTemp_attr1",
      "epathTemp_attr6",
      "epathTemp_attr7",
      "epathTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
PathvectorProv::Prov_r1_2_ecaDel (Ptr<Tuple> epathTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_2_ecaDel triggered");

  Ptr<Tuple> result = epathTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("epathTempDelete_attr1",
      "epathTempDelete_attr6",
      "epathTempDelete_attr7",
      "epathTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
PathvectorProv::Prov_r1_3_ecaAdd (Ptr<Tuple> epathTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaAdd triggered");

  Ptr<Tuple> result = epathTemp;

  result = result->Project (
    EPATH,
    strlist ("epathTemp_attr2",
      "epathTemp_attr3",
      "epathTemp_attr4",
      "epathTemp_attr5",
      "epathTemp_attr6",
      "epathTemp_attr1",
      "epathTemp_attr2"),
    strlist ("epath_attr1",
      "epath_attr2",
      "epath_attr3",
      "epath_attr4",
      "epath_attr5",
      "epath_attr6",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r1_3_ecaDel (Ptr<Tuple> epathTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_3_ecaDel triggered");

  Ptr<Tuple> result = epathTempDelete;

  result = result->Project (
    EPATHDELETE,
    strlist ("epathTempDelete_attr2",
      "epathTempDelete_attr3",
      "epathTempDelete_attr4",
      "epathTempDelete_attr5",
      "epathTempDelete_attr6",
      "epathTempDelete_attr1",
      "epathTempDelete_attr2"),
    strlist ("epathDelete_attr1",
      "epathDelete_attr2",
      "epathDelete_attr3",
      "epathDelete_attr4",
      "epathDelete_attr5",
      "epathDelete_attr6",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r1_4_ecaAdd (Ptr<Tuple> epath)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaAdd triggered");

  Ptr<Tuple> result = epath;

  result = result->Project (
    PATH,
    strlist ("epath_attr1",
      "epath_attr2",
      "epath_attr3",
      "epath_attr4"),
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"));

  Insert (result);
}

void
PathvectorProv::Prov_r1_4_ecaDel (Ptr<Tuple> epathDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_4_ecaDel triggered");

  Ptr<Tuple> result = epathDelete;

  result = result->Project (
    PATH,
    strlist ("epathDelete_attr1",
      "epathDelete_attr2",
      "epathDelete_attr3",
      "epathDelete_attr4"),
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"));

  Delete (result);
}

void
PathvectorProv::Prov_r1_5_ecaAdd (Ptr<Tuple> epath)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaAdd triggered");

  Ptr<Tuple> result = epath;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("path")),
              VarExpr::New ("epath_attr1")),
            VarExpr::New ("epath_attr2")),
          VarExpr::New ("epath_attr3")),
        VarExpr::New ("epath_attr4")))));

  result = result->Project (
    PROV,
    strlist ("epath_attr1",
      "VID",
      "epath_attr5",
      "epath_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
PathvectorProv::Prov_r1_5_ecaDel (Ptr<Tuple> epathDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r1_5_ecaDel triggered");

  Ptr<Tuple> result = epathDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("path")),
              VarExpr::New ("epathDelete_attr1")),
            VarExpr::New ("epathDelete_attr2")),
          VarExpr::New ("epathDelete_attr3")),
        VarExpr::New ("epathDelete_attr4")))));

  result = result->Project (
    PROV,
    strlist ("epathDelete_attr1",
      "VID",
      "epathDelete_attr5",
      "epathDelete_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
PathvectorProv::Prov_r2_1Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (BESTPATH)->Join (
    link,
    strlist ("bestPath_attr1"),
    strlist ("link_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("link_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("bestPath")),
              VarExpr::New ("link_attr1")),
            VarExpr::New ("bestPath_attr2")),
          VarExpr::New ("bestPath_attr3")),
        VarExpr::New ("bestPath_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("C",
    Operation::New (RN_PLUS,
      VarExpr::New ("link_attr3"),
      VarExpr::New ("bestPath_attr3"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("bestPath_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("bestPath_attr4"),
        VarExpr::New ("link_attr2")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPATHTEMP,
    strlist ("RLOC",
      "link_attr2",
      "bestPath_attr2",
      "C",
      "P",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epathTemp_attr1",
      "epathTemp_attr2",
      "epathTemp_attr3",
      "epathTemp_attr4",
      "epathTemp_attr5",
      "epathTemp_attr6",
      "epathTemp_attr7",
      "epathTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r2_1Eca0Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (BESTPATH)->Join (
    link,
    strlist ("bestPath_attr1"),
    strlist ("link_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("link_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("bestPath")),
              VarExpr::New ("link_attr1")),
            VarExpr::New ("bestPath_attr2")),
          VarExpr::New ("bestPath_attr3")),
        VarExpr::New ("bestPath_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("C",
    Operation::New (RN_PLUS,
      VarExpr::New ("link_attr3"),
      VarExpr::New ("bestPath_attr3"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("bestPath_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("bestPath_attr4"),
        VarExpr::New ("link_attr2")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPATHTEMPDELETE,
    strlist ("RLOC",
      "link_attr2",
      "bestPath_attr2",
      "C",
      "P",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epathTempDelete_attr1",
      "epathTempDelete_attr2",
      "epathTempDelete_attr3",
      "epathTempDelete_attr4",
      "epathTempDelete_attr5",
      "epathTempDelete_attr6",
      "epathTempDelete_attr7",
      "epathTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r2_1Eca3Ins (Ptr<Tuple> bestPath)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca3Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    bestPath,
    strlist ("link_attr1"),
    strlist ("bestPath_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("bestPath_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("bestPath")),
              VarExpr::New ("bestPath_attr1")),
            VarExpr::New ("bestPath_attr2")),
          VarExpr::New ("bestPath_attr3")),
        VarExpr::New ("bestPath_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("C",
    Operation::New (RN_PLUS,
      VarExpr::New ("link_attr3"),
      VarExpr::New ("bestPath_attr3"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("bestPath_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("bestPath_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("bestPath_attr4"),
        VarExpr::New ("link_attr2")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPATHTEMP,
    strlist ("RLOC",
      "link_attr2",
      "bestPath_attr2",
      "C",
      "P",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epathTemp_attr1",
      "epathTemp_attr2",
      "epathTemp_attr3",
      "epathTemp_attr4",
      "epathTemp_attr5",
      "epathTemp_attr6",
      "epathTemp_attr7",
      "epathTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r2_1Eca3Del (Ptr<Tuple> bestPath)
{
  RAPIDNET_LOG_INFO ("Prov_r2_1Eca3Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINK)->Join (
    bestPath,
    strlist ("link_attr1"),
    strlist ("bestPath_attr1"));

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("bestPath_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("PID2",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("bestPath")),
              VarExpr::New ("bestPath_attr1")),
            VarExpr::New ("bestPath_attr2")),
          VarExpr::New ("bestPath_attr3")),
        VarExpr::New ("bestPath_attr4")))));

  result->Assign (Assignor::New ("List2",
    FAppend::New (
      VarExpr::New ("PID2"))));

  result->Assign (Assignor::New ("List",
    FConcat::New (
      VarExpr::New ("List"),
      VarExpr::New ("List2"))));

  result->Assign (Assignor::New ("C",
    Operation::New (RN_PLUS,
      VarExpr::New ("link_attr3"),
      VarExpr::New ("bestPath_attr3"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("bestPath_attr4"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("bestPath_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r2"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("bestPath_attr4"),
        VarExpr::New ("link_attr2")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPATHTEMPDELETE,
    strlist ("RLOC",
      "link_attr2",
      "bestPath_attr2",
      "C",
      "P",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("epathTempDelete_attr1",
      "epathTempDelete_attr2",
      "epathTempDelete_attr3",
      "epathTempDelete_attr4",
      "epathTempDelete_attr5",
      "epathTempDelete_attr6",
      "epathTempDelete_attr7",
      "epathTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r3_1Eca0Ins (Ptr<Tuple> bestPath)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca0Ins triggered");

  Ptr<Tuple> result = bestPath;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("path")),
              VarExpr::New ("bestPath_attr1")),
            VarExpr::New ("bestPath_attr2")),
          VarExpr::New ("bestPath_attr3")),
        VarExpr::New ("bestPath_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("bestPath_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EBESTPATHTEMP,
    strlist ("RLOC",
      "bestPath_attr1",
      "bestPath_attr2",
      "bestPath_attr3",
      "bestPath_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("ebestPathTemp_attr1",
      "ebestPathTemp_attr2",
      "ebestPathTemp_attr3",
      "ebestPathTemp_attr4",
      "ebestPathTemp_attr5",
      "ebestPathTemp_attr6",
      "ebestPathTemp_attr7",
      "ebestPathTemp_attr8",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r3_1Eca0Del (Ptr<Tuple> bestPath)
{
  RAPIDNET_LOG_INFO ("Prov_r3_1Eca0Del triggered");

  Ptr<Tuple> result = bestPath;

  result->Assign (Assignor::New ("PID1",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("path")),
              VarExpr::New ("bestPath_attr1")),
            VarExpr::New ("bestPath_attr2")),
          VarExpr::New ("bestPath_attr3")),
        VarExpr::New ("bestPath_attr4")))));

  result->Assign (Assignor::New ("List",
    FAppend::New (
      VarExpr::New ("PID1"))));

  result->Assign (Assignor::New ("RLOC",
    VarExpr::New ("bestPath_attr1")));

  result->Assign (Assignor::New ("R",
    ValueExpr::New (StrValue::New ("r3"))));

  result->Assign (Assignor::New ("RID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          VarExpr::New ("R"),
          VarExpr::New ("RLOC")),
        VarExpr::New ("List")))));

  result = result->Project (
    EBESTPATHTEMPDELETE,
    strlist ("RLOC",
      "bestPath_attr1",
      "bestPath_attr2",
      "bestPath_attr3",
      "bestPath_attr4",
      "RID",
      "R",
      "List",
      "RLOC"),
    strlist ("ebestPathTempDelete_attr1",
      "ebestPathTempDelete_attr2",
      "ebestPathTempDelete_attr3",
      "ebestPathTempDelete_attr4",
      "ebestPathTempDelete_attr5",
      "ebestPathTempDelete_attr6",
      "ebestPathTempDelete_attr7",
      "ebestPathTempDelete_attr8",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r3_2_ecaAdd (Ptr<Tuple> ebestPathTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_ecaAdd triggered");

  Ptr<Tuple> result = ebestPathTemp;

  result = result->Project (
    RULEEXEC,
    strlist ("ebestPathTemp_attr1",
      "ebestPathTemp_attr6",
      "ebestPathTemp_attr7",
      "ebestPathTemp_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Insert (result);
}

void
PathvectorProv::Prov_r3_2_ecaDel (Ptr<Tuple> ebestPathTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_2_ecaDel triggered");

  Ptr<Tuple> result = ebestPathTempDelete;

  result = result->Project (
    RULEEXEC,
    strlist ("ebestPathTempDelete_attr1",
      "ebestPathTempDelete_attr6",
      "ebestPathTempDelete_attr7",
      "ebestPathTempDelete_attr8"),
    strlist ("ruleExec_attr1",
      "ruleExec_attr2",
      "ruleExec_attr3",
      "ruleExec_attr4"));

  Delete (result);
}

void
PathvectorProv::Prov_r3_3_ecaAdd (Ptr<Tuple> ebestPathTemp)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3_ecaAdd triggered");

  Ptr<Tuple> result = ebestPathTemp;

  result = result->Project (
    EBESTPATH,
    strlist ("ebestPathTemp_attr2",
      "ebestPathTemp_attr3",
      "ebestPathTemp_attr4",
      "ebestPathTemp_attr5",
      "ebestPathTemp_attr6",
      "ebestPathTemp_attr1",
      "ebestPathTemp_attr2"),
    strlist ("ebestPath_attr1",
      "ebestPath_attr2",
      "ebestPath_attr3",
      "ebestPath_attr4",
      "ebestPath_attr5",
      "ebestPath_attr6",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Prov_r3_3_ecaDel (Ptr<Tuple> ebestPathTempDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_3_ecaDel triggered");

  Ptr<Tuple> result = ebestPathTempDelete;

  result = result->Project (
    EBESTPATHDELETE,
    strlist ("ebestPathTempDelete_attr2",
      "ebestPathTempDelete_attr3",
      "ebestPathTempDelete_attr4",
      "ebestPathTempDelete_attr5",
      "ebestPathTempDelete_attr6",
      "ebestPathTempDelete_attr1",
      "ebestPathTempDelete_attr2"),
    strlist ("ebestPathDelete_attr1",
      "ebestPathDelete_attr2",
      "ebestPathDelete_attr3",
      "ebestPathDelete_attr4",
      "ebestPathDelete_attr5",
      "ebestPathDelete_attr6",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::R3eca (Ptr<Tuple> path)
{
  RAPIDNET_LOG_INFO ("R3eca triggered");

  Ptr<Tuple> result = path;

  result = result->Project (
    BESTPATH,
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"),
    strlist ("bestPath_attr1",
      "bestPath_attr2",
      "bestPath_attr3",
      "bestPath_attr4"));

  m_aggr_bestpathMinC->Insert (result);
}

void
PathvectorProv::R3eca2 (Ptr<Tuple> path)
{
  RAPIDNET_LOG_INFO ("R3eca2 triggered");

  Ptr<Tuple> result = path;

  result = result->Project (
    BESTPATH,
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"),
    strlist ("bestPath_attr1",
      "bestPath_attr2",
      "bestPath_attr3",
      "bestPath_attr4"));

  m_aggr_bestpathMinC->Delete (result);
}

void
PathvectorProv::Prov_r3_5_ecaAdd (Ptr<Tuple> ebestPath)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_ecaAdd triggered");

  Ptr<Tuple> result = ebestPath;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("bestPath")),
              VarExpr::New ("ebestPath_attr1")),
            VarExpr::New ("ebestPath_attr2")),
          VarExpr::New ("ebestPath_attr3")),
        VarExpr::New ("ebestPath_attr4")))));

  result = result->Project (
    PROV,
    strlist ("ebestPath_attr1",
      "VID",
      "ebestPath_attr5",
      "ebestPath_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
PathvectorProv::Prov_r3_5_ecaDel (Ptr<Tuple> ebestPathDelete)
{
  RAPIDNET_LOG_INFO ("Prov_r3_5_ecaDel triggered");

  Ptr<Tuple> result = ebestPathDelete;

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            Operation::New (RN_PLUS,
              ValueExpr::New (StrValue::New ("bestPath")),
              VarExpr::New ("ebestPathDelete_attr1")),
            VarExpr::New ("ebestPathDelete_attr2")),
          VarExpr::New ("ebestPathDelete_attr3")),
        VarExpr::New ("ebestPathDelete_attr4")))));

  result = result->Project (
    PROV,
    strlist ("ebestPathDelete_attr1",
      "VID",
      "ebestPathDelete_attr5",
      "ebestPathDelete_attr6"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
PathvectorProv::Prov_edb_1Eca1Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Ins triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("link_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("link_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Insert (result);
}

void
PathvectorProv::Prov_edb_1Eca1Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("Prov_edb_1Eca1Del triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("link_attr1")));

  result->Assign (Assignor::New ("VID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("link")),
            VarExpr::New ("link_attr1")),
          VarExpr::New ("link_attr2")),
        VarExpr::New ("link_attr3")))));

  result->Assign (Assignor::New ("RID",
    VarExpr::New ("VID")));

  result = result->Project (
    PROV,
    strlist ("link_attr1",
      "VID",
      "RID",
      "$1"),
    strlist ("prov_attr1",
      "prov_attr2",
      "prov_attr3",
      "prov_attr4"));

  Delete (result);
}

void
PathvectorProv::Edb1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Edb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPEdb::New (
      VarExpr::New ("provQuery_attr3"),
      VarExpr::New ("provQuery_attr1"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = result->Project (
    PRETURN,
    strlist ("provQuery_attr4",
      "provQuery_attr2",
      "provQuery_attr3",
      "Prov",
      "provQuery_attr4"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Idb1_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    provQuery,
    strlist ("prov_attr2", "prov_attr1"),
    strlist ("provQuery_attr3", "provQuery_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("prov_attr3"),
      VarExpr::New ("provQuery_attr3"))));

  result = AggWrapList::New ()->Compute (result, provQuery, "prov_attr3");

  result = result->Project (
    PQLIST,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "list"),
    strlist ("pQList_attr1",
      "pQList_attr2",
      "pQList_attr3"));

  Insert (result);
}

void
PathvectorProv::Idb2_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb2_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    PRESULTTMP,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr4",
      "provQuery_attr3",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
PathvectorProv::Idb3_eca (Ptr<Tuple> provQuery)
{
  RAPIDNET_LOG_INFO ("Idb3_eca triggered");

  Ptr<Tuple> result = provQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    PITERATE,
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "N"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3"));

  SendLocal (result);
}

void
PathvectorProv::Idb4_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("pIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Project (
    PITERATE,
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "N"),
    strlist ("pIterate_attr1",
      "pIterate_attr2",
      "pIterate_attr3"));

  SendLocal (result);
}

void
PathvectorProv::Idb5_eca (Ptr<Tuple> pIterate)
{
  RAPIDNET_LOG_INFO ("Idb5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pIterate,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pIterate_attr2", "pIterate_attr1"));

  result->Assign (Assignor::New ("RID",
    FItem::New (
      VarExpr::New ("pQList_attr3"),
      VarExpr::New ("pIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("pIterate_attr2")),
        VarExpr::New ("RID")))));

  result = result->Select (Selector::New (
    Operation::New (RN_LTE,
      VarExpr::New ("pIterate_attr3"),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Project (
    ERULEQUERY,
    strlist ("pIterate_attr1",
      "NQID",
      "RID"),
    strlist ("eRuleQuery_attr1",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3"));

  SendLocal (result);
}

void
PathvectorProv::Idb6_eca (Ptr<Tuple> eRuleQuery)
{
  RAPIDNET_LOG_INFO ("Idb6_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PROV)->Join (
    eRuleQuery,
    strlist ("prov_attr3", "prov_attr1"),
    strlist ("eRuleQuery_attr3", "eRuleQuery_attr1"));

  result = result->Project (
    RULEQUERY,
    strlist ("prov_attr4",
      "eRuleQuery_attr2",
      "eRuleQuery_attr3",
      "eRuleQuery_attr1",
      "prov_attr4"),
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr3",
      "ruleQuery_attr4",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Idb7_eca (Ptr<Tuple> rReturn)
{
  RAPIDNET_LOG_INFO ("Idb7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    rReturn,
    strlist ("pResultTmp_attr1"),
    strlist ("rReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("rReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("rReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("pResultTmp_attr2")),
          VarExpr::New ("rReturn_attr3"))))));

  result = result->Project (
    PRESULTTMP,
    strlist ("rReturn_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "Buf"),
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2",
      "pResultTmp_attr3",
      "pResultTmp_attr4",
      "pResultTmp_attr5"));

  Insert (result);
}

void
PathvectorProv::Idb8Eca0Ins (Ptr<Tuple> pResultTmp)
{
  RAPIDNET_LOG_INFO ("Idb8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PQLIST)->Join (
    pResultTmp,
    strlist ("pQList_attr2", "pQList_attr1"),
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pResultTmp_attr1",
      "pResultTmp_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
PathvectorProv::Idb8Eca1Ins (Ptr<Tuple> pQList)
{
  RAPIDNET_LOG_INFO ("Idb8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    pQList,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("pQList_attr2", "pQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("pQList_attr3")))));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      FSize::New (
        VarExpr::New ("pResultTmp_attr5")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    EPRETURN,
    strlist ("pQList_attr1",
      "pQList_attr2"),
    strlist ("ePReturn_attr1",
      "ePReturn_attr2"));

  SendLocal (result);
}

void
PathvectorProv::Idb9_eca (Ptr<Tuple> ePReturn)
{
  RAPIDNET_LOG_INFO ("Idb9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (PRESULTTMP)->Join (
    ePReturn,
    strlist ("pResultTmp_attr2", "pResultTmp_attr1"),
    strlist ("ePReturn_attr2", "ePReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPIdb::New (
      VarExpr::New ("pResultTmp_attr5"),
      VarExpr::New ("ePReturn_attr1"))));

  result = result->Project (
    PRETURN,
    strlist ("pResultTmp_attr3",
      "ePReturn_attr2",
      "pResultTmp_attr4",
      "Prov",
      "pResultTmp_attr3"),
    strlist ("pReturn_attr1",
      "pReturn_attr2",
      "pReturn_attr3",
      "pReturn_attr4",
      RN_DEST));

  Send (result);
}

void
PathvectorProv::Rv1_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv1_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RULEEXEC)->Join (
    ruleQuery,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("ruleQuery_attr3", "ruleQuery_attr1"));

  result = result->Project (
    RQLIST,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleExec_attr4"),
    strlist ("rQList_attr1",
      "rQList_attr2",
      "rQList_attr3"));

  Insert (result);
}

void
PathvectorProv::Rv2_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv2_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("Buf",
    FEmpty::New (
)));

  result = result->Project (
    RRESULTTMP,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "ruleQuery_attr4",
      "ruleQuery_attr3",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
PathvectorProv::Rv3_eca (Ptr<Tuple> ruleQuery)
{
  RAPIDNET_LOG_INFO ("Rv3_eca triggered");

  Ptr<Tuple> result = ruleQuery;

  result->Assign (Assignor::New ("N",
    ValueExpr::New (Int32Value::New (1))));

  result = result->Project (
    RITERATE,
    strlist ("ruleQuery_attr1",
      "ruleQuery_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
PathvectorProv::Rv4_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv4_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("N",
    Operation::New (RN_PLUS,
      VarExpr::New ("rIterate_attr3"),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      VarExpr::New ("rIterate_attr3"),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    RITERATE,
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "N"),
    strlist ("rIterate_attr1",
      "rIterate_attr2",
      "rIterate_attr3"));

  SendLocal (result);
}

void
PathvectorProv::Rv5_eca (Ptr<Tuple> rIterate)
{
  RAPIDNET_LOG_INFO ("Rv5_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rIterate,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rIterate_attr2", "rIterate_attr1"));

  result->Assign (Assignor::New ("VID",
    FItem::New (
      VarExpr::New ("rQList_attr3"),
      VarExpr::New ("rIterate_attr3"))));

  result->Assign (Assignor::New ("NQID",
    FSha1::New (
      Operation::New (RN_PLUS,
        Operation::New (RN_PLUS,
          ValueExpr::New (StrValue::New ("")),
          VarExpr::New ("rIterate_attr2")),
        VarExpr::New ("VID")))));

  result = result->Project (
    EPROVQUERY,
    strlist ("rIterate_attr1",
      "NQID",
      "VID"),
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3"));

  SendLocal (result);
}

void
PathvectorProv::Rv6_eca (Ptr<Tuple> eProvQuery)
{
  RAPIDNET_LOG_INFO ("Rv6_eca triggered");

  Ptr<Tuple> result = eProvQuery;

  result->Assign (Assignor::New ("$1",
    VarExpr::New ("eProvQuery_attr1")));

  result = result->Project (
    PROVQUERY,
    strlist ("eProvQuery_attr1",
      "eProvQuery_attr2",
      "eProvQuery_attr3",
      "$1"),
    strlist ("provQuery_attr1",
      "provQuery_attr2",
      "provQuery_attr3",
      "provQuery_attr4"));

  SendLocal (result);
}

void
PathvectorProv::Rv7_eca (Ptr<Tuple> pReturn)
{
  RAPIDNET_LOG_INFO ("Rv7_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    pReturn,
    strlist ("rResultTmp_attr1"),
    strlist ("pReturn_attr1"));

  result->Assign (Assignor::New ("Buf2",
    FAppend::New (
      VarExpr::New ("pReturn_attr4"))));

  result->Assign (Assignor::New ("Buf",
    FConcat::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("Buf2"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("pReturn_attr2"),
      FSha1::New (
        Operation::New (RN_PLUS,
          Operation::New (RN_PLUS,
            ValueExpr::New (StrValue::New ("")),
            VarExpr::New ("rResultTmp_attr2")),
          VarExpr::New ("pReturn_attr3"))))));

  result = result->Project (
    RRESULTTMP,
    strlist ("pReturn_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "Buf"),
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2",
      "rResultTmp_attr3",
      "rResultTmp_attr4",
      "rResultTmp_attr5"));

  Insert (result);
}

void
PathvectorProv::Rv8Eca0Ins (Ptr<Tuple> rResultTmp)
{
  RAPIDNET_LOG_INFO ("Rv8Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RQLIST)->Join (
    rResultTmp,
    strlist ("rQList_attr2", "rQList_attr1"),
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    ERRETURN,
    strlist ("rResultTmp_attr1",
      "rResultTmp_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
PathvectorProv::Rv8Eca1Ins (Ptr<Tuple> rQList)
{
  RAPIDNET_LOG_INFO ("Rv8Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    rQList,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("rQList_attr2", "rQList_attr1"));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("rResultTmp_attr5")),
      FSize::New (
        VarExpr::New ("rQList_attr3")))));

  result = result->Project (
    ERRETURN,
    strlist ("rQList_attr1",
      "rQList_attr2"),
    strlist ("eRReturn_attr1",
      "eRReturn_attr2"));

  SendLocal (result);
}

void
PathvectorProv::Rv9_eca (Ptr<Tuple> eRReturn)
{
  RAPIDNET_LOG_INFO ("Rv9_eca triggered");

  Ptr<RelationBase> result;

  result = GetRelation (RRESULTTMP)->Join (
    eRReturn,
    strlist ("rResultTmp_attr2", "rResultTmp_attr1"),
    strlist ("eRReturn_attr2", "eRReturn_attr1"));

  result = GetRelation (RULEEXEC)->Join (
    result,
    strlist ("ruleExec_attr2", "ruleExec_attr1"),
    strlist ("rResultTmp_attr4", "eRReturn_attr1"));

  result->Assign (Assignor::New ("Prov",
    FPRule::New (
      VarExpr::New ("rResultTmp_attr5"),
      VarExpr::New ("eRReturn_attr1"),
      VarExpr::New ("ruleExec_attr3"))));

  result = result->Project (
    RRETURN,
    strlist ("rResultTmp_attr3",
      "eRReturn_attr2",
      "rResultTmp_attr4",
      "Prov",
      "rResultTmp_attr3"),
    strlist ("rReturn_attr1",
      "rReturn_attr2",
      "rReturn_attr3",
      "rReturn_attr4",
      RN_DEST));

  Send (result);
}

