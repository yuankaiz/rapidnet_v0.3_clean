/* HSLS periodic */

#define HSLS_PERIOD_1 60 // 1  // 2^0*T_e // 10
#define HSLS_PERIOD_2 120 // 2  // 2^1*T_e // 20
#define HSLS_PERIOD_3 240 // 4  // 2^2*T_e // 40
#define HSLS_PERIOD_4 480 // 8  // 2^3*T_e // 80
#define HSLS_PERIOD_5 960 // 16 // 2^4*T_e // 160
#define HSLS_PERIOD_1_M1 59
#define HSLS_PERIOD_2_M1 119
#define HSLS_PERIOD_3_M1 239
#define HSLS_PERIOD_4_M1 479
#define HSLS_TTL_1 2
#define HSLS_TTL_2 4
#define HSLS_TTL_3 8
#define HSLS_TTL_4 16
#define INITIAL_DELAY 60
#define INITIAL_DELAY_M1 59
#define TLINK_TIMEOUT 11
#define TLSU_TIMEOUT 65
#define INFINITY 999999
#define SPACEOUT 1

materialize(tLink, TLINK_TIMEOUT, infinity, keys(1, 2)).
//tLink(@Src, Next, Cost, SeqNum)

materialize(tLSU, TLSU_TIMEOUT, infinity, keys(1, 2, 3)).
// tLSU(@Local, Src, Next, Cost, SeqNum, TTL)

///////////////////////////////// Link dynamics reflected by neighbor discovery

// If a link is inserted, issue a linkAdd event locally.
r01 eLinkAdd(@Src, Next, Cost):- 
    link(@Src, Next, Cost),
    Src != Next.
    
// Check if the link is new by join and count.
r02 eLinkCount(@Src, Next, Cost, a_COUNT<*>):- 
    eLinkAdd(@Src, Next, Cost),
    tLink(@Src, Next, Cost_2, SeqNum).

r03 tLink(@Src, Next, Cost, SeqNum):- // Insert if new link.
    eLinkCount(@Src, Next, Cost, Count),
    Count == 0,
    SeqNum := 0.

r04 tLink(@Src, Next, Cost, SeqNum):- // Refresh
    eLinkAdd(@Src, Next, Cost),
    tLink(@Src, Next, Cost_2, SeqNum).

///////////////////////////////////////////// Periodic update of LSUs (locally)

// Periodically send the links as LSUs locally.
r11A eLSU(@Src, Src, Next, Cost, SeqNum, TTL):- 
     periodic(@Src, E, HSLS_PERIOD_2, 0, HSLS_PERIOD_1, SPACEOUT),
     tLink(@Src, Next, Cost, SeqNum),
     TTL := HSLS_TTL_1.
     
//Periodically increment the sequence numbers of all links.
r11B tLink(@Src, Next, Cost, SeqNumU):- 
     periodic(@Src, E, HSLS_PERIOD_2, 0, HSLS_PERIOD_1_M1),
     tLink(@Src, Next, Cost, SeqNum),
     SeqNumU := SeqNum + 1.

r12A eLSU(@Src, Src, Next, Cost, SeqNum, TTL):- // similar afterwards ...
     periodic(@Src, E, HSLS_PERIOD_3, 0, HSLS_PERIOD_2, SPACEOUT),
     tLink(@Src, Next, Cost, SeqNum),
     TTL := HSLS_TTL_2.

r12B  tLink(@Src, Next, Cost, SeqNumU):-
      periodic(@Src, E, HSLS_PERIOD_3, 0, HSLS_PERIOD_2_M1),
      tLink(@Src, Next, Cost, SeqNum),
      SeqNumU := SeqNum + 1.

r13A eLSU(@Src, Src, Next, Cost, SeqNum, TTL):-
     periodic(@Src, E, HSLS_PERIOD_4, 0, HSLS_PERIOD_3, SPACEOUT),
     tLink(@Src, Next, Cost, SeqNum),
     TTL := HSLS_TTL_3.

r13B tLink(@Src, Next, Cost, SeqNumU):-
     periodic(@Src, E, HSLS_PERIOD_4, 0, HSLS_PERIOD_3_M1),
     tLink(@Src, Next, Cost, SeqNum),
     SeqNumU := SeqNum + 1.

r14A eLSU(@Src, Src, Next, Cost, SeqNum, TTL):-
     periodic(@Src, E, HSLS_PERIOD_5, 0, HSLS_PERIOD_4, SPACEOUT),
     tLink(@Src, Next, Cost, SeqNum),
     TTL := HSLS_TTL_4.

r14B tLink(@Src, Next, Cost, SeqNumU):-
     periodic(@Src, E, HSLS_PERIOD_5, 0, HSLS_PERIOD_4_M1),
     tLink(@Src, Next, Cost, SeqNum),
     SeqNumU := SeqNum + 1.

/////////////////////////////////////////////////////// LSU insertion or update

// Replace broadcast address with current address
r21 eLSULoc(@Local, LastHop, Dst, Cost, SeqNum, TTL):- 
    eLSU(@X, LastHop, Dst, Cost, SeqNum, TTL).
    
// Check if LSU is new by join and count.
r22 eLSUCount(@Src, LastHop, Dst, Cost, SeqNum, TTL, a_COUNT<*>):- 
    eLSULoc(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2).

r23 tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL):- // Insert the LSU if new.
    eLSUCount(@Src, LastHop, Dst, Cost, SeqNum, TTL, Count),
    Count == 0.
    
// If not new LSU but greater sequence number then update sequence number.
r24 tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL):- 
    eLSULoc(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2),
    SeqNum > SeqNum_2.

///////////////////////////////////////////////////////// Broadcast LSU updates

// If LSU is updated then issue an LSUChange event.
r31 eLSUChange(@Src, LastHop, Dst, Cost, SeqNum, TTL):- 
    tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL).
    
// If LSU changes then broadcast to all neighbors.
r32 eLSU(@Broadcast, LastHop, Dst, Cost, SeqNum, TTLU):- 
    eLSUChange(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    TTL > 0,
    TTLU := TTL - 1.

/////////////////////////////////////////////////////////////////// 
