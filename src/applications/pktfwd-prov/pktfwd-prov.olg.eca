ECA Rule prov_p1_1Eca0Ins ACTION_REMOTE_SEND<epathTemp(@RLOC, X, Y, C, P, N, RID, R, List)> :- EVENT_INSERT<link(@X, Y, C)>, PID1 := f_sha1(((link+ X)+ Y)+ C), List := f_append(PID1), P1 := f_append(X), P2 := f_append(Y), P := f_concat(P1, P2), N := Y, RLOC := X, R := p1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_p1_1Eca0Del ACTION_REMOTE_SEND<epathTempDelete(@RLOC, X, Y, C, P, N, RID, R, List)> :- EVENT_DELETE<link(@X, Y, C)>, PID1 := f_sha1(((link+ X)+ Y)+ C), List := f_append(PID1), P1 := f_append(X), P2 := f_append(Y), P := f_concat(P1, P2), N := Y, RLOC := X, R := p1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_p1_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epathTemp(@RLOC, X, Y, C, P, N, RID, R, List)>.
ECA Rule prov_p1_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epathTempDelete(@RLOC, X, Y, C, P, N, RID, R, List)>.
ECA Rule prov_p1_3_ecaAdd ACTION_REMOTE_SEND<epath(@X, Y, C, P, N, RID, RLOC)> :- EVENT_RECV<epathTemp(@RLOC, X, Y, C, P, N, RID, R, List)>.
ECA Rule prov_p1_3_ecaDel ACTION_REMOTE_SEND<epathDelete(@X, Y, C, P, N, RID, RLOC)> :- EVENT_RECV<epathTempDelete(@RLOC, X, Y, C, P, N, RID, R, List)>.
ECA Rule prov_p1_4_ecaAdd ACTION_ADD<path(@X, Y, C, P, N)> :- EVENT_RECV<epath(@X, Y, C, P, N, RID, RLOC)>.
ECA Rule prov_p1_4_ecaDel ACTION_DELETE<path(@X, Y, C, P, N)> :- EVENT_RECV<epathDelete(@X, Y, C, P, N, RID, RLOC)>.
ECA Rule prov_p1_5_ecaAdd ACTION_ADD<prov(@X, VID, RID, RLOC)> :- EVENT_RECV<epath(@X, Y, C, P, N, RID, RLOC)>, VID := f_sha1(((((path+ X)+ Y)+ C)+ P)+ N).
ECA Rule prov_p1_5_ecaDel ACTION_DELETE<prov(@X, VID, RID, RLOC)> :- EVENT_RECV<epathDelete(@X, Y, C, P, N, RID, RLOC)>, VID := f_sha1(((((path+ X)+ Y)+ C)+ P)+ N).
ECA Rule prov_p2_1Eca0Ins ACTION_REMOTE_SEND<epathTemp(@RLOC, Z, Y, C, P, N, RID, R, List)> :- EVENT_INSERT<link(@X, Z, C1)>, bestPath(@X, Y, C2, P2, N1), PID1 := f_sha1(((link+ X)+ Z)+ C1), List := f_append(PID1), PID2 := f_sha1(((((bestPath+ X)+ Y)+ C2)+ P2)+ N1), List2 := f_append(PID2), List := f_concat(List, List2), C := C1+ C2, f_member(P2, Z) == 0, P1 := f_append(Z), P := f_concat(P1, P2), N := X, RLOC := X, R := p2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_p2_1Eca0Del ACTION_REMOTE_SEND<epathTempDelete(@RLOC, Z, Y, C, P, N, RID, R, List)> :- EVENT_DELETE<link(@X, Z, C1)>, bestPath(@X, Y, C2, P2, N1), PID1 := f_sha1(((link+ X)+ Z)+ C1), List := f_append(PID1), PID2 := f_sha1(((((bestPath+ X)+ Y)+ C2)+ P2)+ N1), List2 := f_append(PID2), List := f_concat(List, List2), C := C1+ C2, f_member(P2, Z) == 0, P1 := f_append(Z), P := f_concat(P1, P2), N := X, RLOC := X, R := p2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_p2_1Eca3Ins ACTION_REMOTE_SEND<epathTemp(@RLOC, Z, Y, C, P, N, RID, R, List)> :- EVENT_INSERT<bestPath(@X, Y, C2, P2, N1)>, link(@X, Z, C1), PID1 := f_sha1(((link+ X)+ Z)+ C1), List := f_append(PID1), PID2 := f_sha1(((((bestPath+ X)+ Y)+ C2)+ P2)+ N1), List2 := f_append(PID2), List := f_concat(List, List2), C := C1+ C2, f_member(P2, Z) == 0, P1 := f_append(Z), P := f_concat(P1, P2), N := X, RLOC := X, R := p2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_p2_1Eca3Del ACTION_REMOTE_SEND<epathTempDelete(@RLOC, Z, Y, C, P, N, RID, R, List)> :- EVENT_DELETE<bestPath(@X, Y, C2, P2, N1)>, link(@X, Z, C1), PID1 := f_sha1(((link+ X)+ Z)+ C1), List := f_append(PID1), PID2 := f_sha1(((((bestPath+ X)+ Y)+ C2)+ P2)+ N1), List2 := f_append(PID2), List := f_concat(List, List2), C := C1+ C2, f_member(P2, Z) == 0, P1 := f_append(Z), P := f_concat(P1, P2), N := X, RLOC := X, R := p2, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_p3_1Eca0Ins ACTION_REMOTE_SEND<ebestPathTemp(@RLOC, X, Y, C, P, N, RID, R, List)> :- EVENT_INSERT<bestPath(@X, Y, C, P, N)>, PID1 := f_sha1(((((path+ X)+ Y)+ C)+ P)+ N), List := f_append(PID1), RLOC := X, R := p3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_p3_1Eca0Del ACTION_REMOTE_SEND<ebestPathTempDelete(@RLOC, X, Y, C, P, N, RID, R, List)> :- EVENT_DELETE<bestPath(@X, Y, C, P, N)>, PID1 := f_sha1(((((path+ X)+ Y)+ C)+ P)+ N), List := f_append(PID1), RLOC := X, R := p3, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_p3_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<ebestPathTemp(@RLOC, X, Y, C, P, N, RID, R, List)>.
ECA Rule prov_p3_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<ebestPathTempDelete(@RLOC, X, Y, C, P, N, RID, R, List)>.
ECA Rule prov_p3_3_ecaAdd ACTION_REMOTE_SEND<ebestPath(@X, Y, C, P, N, RID, RLOC)> :- EVENT_RECV<ebestPathTemp(@RLOC, X, Y, C, P, N, RID, R, List)>.
ECA Rule prov_p3_3_ecaDel ACTION_REMOTE_SEND<ebestPathDelete(@X, Y, C, P, N, RID, RLOC)> :- EVENT_RECV<ebestPathTempDelete(@RLOC, X, Y, C, P, N, RID, R, List)>.
ECA Rule p3eca ACTION_ADD<bestPath(@X, Y, MIN< C >, P, N)> :- EVENT_INSERT<path(@X, Y, C, P, N)>.
ECA Rule p3eca2 ACTION_DELETE<bestPath(@X, Y, MIN< C >, P, N)> :- EVENT_DELETE<path(@X, Y, C, P, N)>.
ECA Rule prov_p3_5_ecaAdd ACTION_ADD<prov(@X, VID, RID, RLOC)> :- EVENT_RECV<ebestPath(@X, Y, C, P, N, RID, RLOC)>, VID := f_sha1(((((bestPath+ X)+ Y)+ C)+ P)+ N).
ECA Rule prov_p3_5_ecaDel ACTION_DELETE<prov(@X, VID, RID, RLOC)> :- EVENT_RECV<ebestPathDelete(@X, Y, C, P, N, RID, RLOC)>, VID := f_sha1(((((bestPath+ X)+ Y)+ C)+ P)+ N).
ECA Rule prov_i0_1_ecaperiodic ACTION_LOCAL_SEND<prov_i0_1_ecaperiodic(@X, E)> :- EVENT_INSERT<periodic(@X, E, 0.01, 9000)>.
ECA Rule prov_i0_1_eca ACTION_REMOTE_SEND<einitTemp(@RLOC, X, Ind, RID, R, List)> :- EVENT_RECV<prov_i0_1_ecaperiodic(@X, E)>, status(@X), PID1 := f_sha1((((periodic+ X)+ E)+ 0.01)+ 9000), List := f_append(PID1), PID2 := f_sha1(status+ X), List2 := f_append(PID2), List := f_concat(List, List2), Ind := f_rand(), RLOC := X, R := i0, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_i0_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<einitTemp(@RLOC, X, Ind, RID, R, List)>.
ECA Rule prov_i0_3_ecaAdd ACTION_REMOTE_SEND<einit(@X, Ind, RID, RLOC)> :- EVENT_RECV<einitTemp(@RLOC, X, Ind, RID, R, List)>.
ECA Rule prov_i0_4_ecaAdd ACTION_LOCAL_SEND<init(@X, Ind)> :- EVENT_RECV<einit(@X, Ind, RID, RLOC)>.
ECA Rule prov_i0_5_ecaAdd ACTION_ADD<prov(@X, VID, RID, RLOC)> :- EVENT_RECV<einit(@X, Ind, RID, RLOC)>, VID := f_sha1((init+ X)+ Ind).
ECA Rule prov_i1_1_ecaAdd ACTION_REMOTE_SEND<eeSendTemp(@RLOC, X, D, RID, R, List)> :- EVENT_RECV<init(@X, Ind)>, table(@X, Ind, D), PID1 := f_sha1((init+ X)+ Ind), List := f_append(PID1), PID2 := f_sha1(((table+ X)+ Ind)+ D), List2 := f_append(PID2), List := f_concat(List, List2), RLOC := X, R := i1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_i1_1_ecaDel ACTION_REMOTE_SEND<eeSendTempDelete(@RLOC, X, D, RID, R, List)> :- EVENT_RECV<initDelete(@X, Ind)>, table(@X, Ind, D), PID1 := f_sha1((init+ X)+ Ind), List := f_append(PID1), PID2 := f_sha1(((table+ X)+ Ind)+ D), List2 := f_append(PID2), List := f_concat(List, List2), RLOC := X, R := i1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_i1_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<eeSendTemp(@RLOC, X, D, RID, R, List)>.
ECA Rule prov_i1_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<eeSendTempDelete(@RLOC, X, D, RID, R, List)>.
ECA Rule prov_i1_3_ecaAdd ACTION_REMOTE_SEND<eeSend(@X, D, RID, RLOC)> :- EVENT_RECV<eeSendTemp(@RLOC, X, D, RID, R, List)>.
ECA Rule prov_i1_3_ecaDel ACTION_REMOTE_SEND<eeSendDelete(@X, D, RID, RLOC)> :- EVENT_RECV<eeSendTempDelete(@RLOC, X, D, RID, R, List)>.
ECA Rule prov_i1_4_ecaAdd ACTION_LOCAL_SEND<eSend(@X, D)> :- EVENT_RECV<eeSend(@X, D, RID, RLOC)>.
ECA Rule prov_i1_4_ecaDel ACTION_LOCAL_SEND<eSend(@X, D)> :- EVENT_RECV<eeSendDelete(@X, D, RID, RLOC)>.
ECA Rule prov_i1_5_ecaAdd ACTION_ADD<prov(@X, VID, RID, RLOC)> :- EVENT_RECV<eeSend(@X, D, RID, RLOC)>, VID := f_sha1((eSend+ X)+ D).
ECA Rule prov_i1_5_ecaDel ACTION_DELETE<prov(@X, VID, RID, RLOC)> :- EVENT_RECV<eeSendDelete(@X, D, RID, RLOC)>, VID := f_sha1((eSend+ X)+ D).
ECA Rule prov_r0_1_ecaAdd ACTION_REMOTE_SEND<epacketTemp(@RLOC, X, D, PID, Data, RID, R, List)> :- EVENT_RECV<eSend(@X, D)>, PID1 := f_sha1((eSend+ X)+ D), List := f_append(PID1), Time := f_now(), PID := f_sha1(+ Time), Data := 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef, RLOC := X, R := r0, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r0_1_ecaDel ACTION_REMOTE_SEND<epacketTempDelete(@RLOC, X, D, PID, Data, RID, R, List)> :- EVENT_RECV<eSendDelete(@X, D)>, PID1 := f_sha1((eSend+ X)+ D), List := f_append(PID1), Time := f_now(), PID := f_sha1(+ Time), Data := 0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef, RLOC := X, R := r0, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r0_2_ecaAdd ACTION_ADD<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epacketTemp(@RLOC, X, D, PID, Data, RID, R, List)>.
ECA Rule prov_r0_2_ecaDel ACTION_DELETE<ruleExec(@RLOC, RID, R, List)> :- EVENT_RECV<epacketTempDelete(@RLOC, X, D, PID, Data, RID, R, List)>.
ECA Rule prov_r0_3_ecaAdd ACTION_REMOTE_SEND<epacket(@X, D, PID, Data, RID, RLOC)> :- EVENT_RECV<epacketTemp(@RLOC, X, D, PID, Data, RID, R, List)>.
ECA Rule prov_r0_3_ecaDel ACTION_REMOTE_SEND<epacketDelete(@X, D, PID, Data, RID, RLOC)> :- EVENT_RECV<epacketTempDelete(@RLOC, X, D, PID, Data, RID, R, List)>.
ECA Rule prov_r0_4_ecaAdd ACTION_LOCAL_SEND<packet(@X, D, PID, Data)> :- EVENT_RECV<epacket(@X, D, PID, Data, RID, RLOC)>.
ECA Rule prov_r0_4_ecaDel ACTION_LOCAL_SEND<packet(@X, D, PID, Data)> :- EVENT_RECV<epacketDelete(@X, D, PID, Data, RID, RLOC)>.
ECA Rule prov_r0_5_ecaAdd ACTION_ADD<prov(@X, VID, RID, RLOC)> :- EVENT_RECV<epacket(@X, D, PID, Data, RID, RLOC)>, VID := f_sha1((((packet+ X)+ D)+ PID)+ Data).
ECA Rule prov_r0_5_ecaDel ACTION_DELETE<prov(@X, VID, RID, RLOC)> :- EVENT_RECV<epacketDelete(@X, D, PID, Data, RID, RLOC)>, VID := f_sha1((((packet+ X)+ D)+ PID)+ Data).
ECA Rule prov_r1_1_ecaAdd ACTION_REMOTE_SEND<epacketTemp(@RLOC, N, D, PID, Data, RID, R, List)> :- EVENT_RECV<packet(@X, D, PID, Data)>, bestPath(@X, D, C, P, N), PID1 := f_sha1((((packet+ X)+ D)+ PID)+ Data), List := f_append(PID1), PID2 := f_sha1(((((bestPath+ X)+ D)+ C)+ P)+ N), List2 := f_append(PID2), List := f_concat(List, List2), X != D, RLOC := X, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_r1_1_ecaDel ACTION_REMOTE_SEND<epacketTempDelete(@RLOC, N, D, PID, Data, RID, R, List)> :- EVENT_RECV<packetDelete(@X, D, PID, Data)>, bestPath(@X, D, C, P, N), PID1 := f_sha1((((packet+ X)+ D)+ PID)+ Data), List := f_append(PID1), PID2 := f_sha1(((((bestPath+ X)+ D)+ C)+ P)+ N), List2 := f_append(PID2), List := f_concat(List, List2), X != D, RLOC := X, R := r1, RID := f_sha1((R+ RLOC)+ List).
ECA Rule prov_edb_1Eca1Ins ACTION_ADD<prov(@X, VID, RID, $1)> :- EVENT_INSERT<link(@X, Y, C)>, $1 := X, VID := f_sha1(((link+ X)+ Y)+ C), RID := VID.
ECA Rule prov_edb_1Eca1Del ACTION_DELETE<prov(@X, VID, RID, $1)> :- EVENT_DELETE<link(@X, Y, C)>, $1 := X, VID := f_sha1(((link+ X)+ Y)+ C), RID := VID.
ECA Rule prov_edb_2Eca1Ins ACTION_ADD<prov(@X, VID, RID, $1)> :- EVENT_INSERT<status(@X)>, $1 := X, VID := f_sha1(status+ X), RID := VID.
ECA Rule prov_edb_2Eca1Del ACTION_DELETE<prov(@X, VID, RID, $1)> :- EVENT_DELETE<status(@X)>, $1 := X, VID := f_sha1(status+ X), RID := VID.
ECA Rule prov_edb_3Eca1Ins ACTION_ADD<prov(@X, VID, RID, $1)> :- EVENT_INSERT<table(@X, Ind, D)>, $1 := X, VID := f_sha1(((table+ X)+ Ind)+ D), RID := VID.
ECA Rule prov_edb_3Eca1Del ACTION_DELETE<prov(@X, VID, RID, $1)> :- EVENT_DELETE<table(@X, Ind, D)>, $1 := X, VID := f_sha1(((table+ X)+ Ind)+ D), RID := VID.
ECA Rule edb1_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, prov(@X, VID, RID, RLoc), RID == VID, Prov := f_pEDB(VID, X).
ECA Rule idb1_eca ACTION_ADD<pQList(@X, QID, LIST< RID >)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, prov(@X, VID, RID, RLoc), RID != VID.
ECA Rule idb2_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, Buf := f_empty().
ECA Rule idb3_eca ACTION_LOCAL_SEND<pIterate(@X, QID, N)> :- EVENT_RECV<provQuery(@X, QID, VID, Ret)>, N := 1.
ECA Rule idb4_eca ACTION_LOCAL_SEND<pIterate(@X, QID, N)> :- EVENT_RECV<pIterate(@X, QID, N1)>, pQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
ECA Rule idb5_eca ACTION_LOCAL_SEND<eRuleQuery(@X, NQID, RID)> :- EVENT_RECV<pIterate(@X, QID, N)>, pQList(@X, QID, List), N <= f_size(List), RID := f_item(List, N), NQID := f_sha1((+ QID)+ RID).
ECA Rule idb6_eca ACTION_REMOTE_SEND<ruleQuery(@RLoc, QID, RID, X)> :- EVENT_RECV<eRuleQuery(@X, QID, RID)>, prov(@X, VID, RID, RLoc).
ECA Rule idb7_eca ACTION_ADD<pResultTmp(@X, QID, Ret, VID, Buf)> :- EVENT_RECV<rReturn(@X, NQID, RID, Prov)>, pResultTmp(@X, QID, Ret, VID, Buf1), NQID == f_sha1((+ QID)+ RID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule idb8Eca0Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pResultTmp(@X, QID, Ret, VID, Buf)>, pQList(@X, QID, List), f_size(Buf) == f_size(List), f_size(Buf) != 0.
ECA Rule idb8Eca1Ins ACTION_LOCAL_SEND<ePReturn(@X, QID)> :- EVENT_INSERT<pQList(@X, QID, List)>, pResultTmp(@X, QID, Ret, VID, Buf), f_size(Buf) == f_size(List), f_size(Buf) != 0.
ECA Rule idb9_eca ACTION_REMOTE_SEND<pReturn(@Ret, QID, VID, Prov)> :- EVENT_RECV<ePReturn(@X, QID)>, pResultTmp(@X, QID, Ret, VID, Buf), Prov := f_pIDB(Buf, X).
ECA Rule rv1_eca ACTION_ADD<rQList(@X, QID, List)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, ruleExec(@X, RID, R, List).
ECA Rule rv2_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, Buf := f_empty().
ECA Rule rv3_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<ruleQuery(@X, QID, RID, Ret)>, N := 1.
ECA Rule rv4_eca ACTION_LOCAL_SEND<rIterate(@X, QID, N)> :- EVENT_RECV<rIterate(@X, QID, N1)>, rQList(@X, QID, List), N1 < f_size(List), N := N1+ 1.
ECA Rule rv5_eca ACTION_LOCAL_SEND<eProvQuery(@X, NQID, VID)> :- EVENT_RECV<rIterate(@X, QID, N)>, rQList(@X, QID, List), VID := f_item(List, N), NQID := f_sha1((+ QID)+ VID).
ECA Rule rv6_eca ACTION_LOCAL_SEND<provQuery(@X, QID, VID, $1)> :- EVENT_RECV<eProvQuery(@X, QID, VID)>, $1 := X.
ECA Rule rv7_eca ACTION_ADD<rResultTmp(@X, QID, Ret, RID, Buf)> :- EVENT_RECV<pReturn(@X, NQID, VID, Prov)>, rResultTmp(@X, QID, Ret, RID, Buf1), NQID == f_sha1((+ QID)+ VID), Buf2 := f_append(Prov), Buf := f_concat(Buf1, Buf2).
ECA Rule rv8Eca0Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rResultTmp(@X, QID, Ret, RID, Buf)>, rQList(@X, QID, List), f_size(Buf) == f_size(List).
ECA Rule rv8Eca1Ins ACTION_LOCAL_SEND<eRReturn(@X, QID)> :- EVENT_INSERT<rQList(@X, QID, List)>, rResultTmp(@X, QID, Ret, RID, Buf), f_size(Buf) == f_size(List).
ECA Rule rv9_eca ACTION_REMOTE_SEND<rReturn(@Ret, QID, RID, Prov)> :- EVENT_RECV<eRReturn(@X, QID)>, rResultTmp(@X, QID, Ret, RID, Buf), ruleExec(@X, RID, R, List), Prov := f_pRULE(Buf, X, R).
