// HSLS periodic

#define HSLS_PERIOD_1 60 // 1  // 2^0*T_e // 10
#define HSLS_PERIOD_2 120 // 2  // 2^1*T_e // 20
#define HSLS_PERIOD_3 240 // 4  // 2^2*T_e // 40
#define HSLS_PERIOD_4 480 // 8  // 2^3*T_e // 80
#define HSLS_PERIOD_5 960 // 16 // 2^4*T_e // 160
#define HSLS_PERIOD_1_M1 59
#define HSLS_PERIOD_2_M1 119
#define HSLS_PERIOD_3_M1 239
#define HSLS_PERIOD_4_M1 479
#define HSLS_TTL_1 2
#define HSLS_TTL_2 4
#define HSLS_TTL_3 8
#define HSLS_TTL_4 16
#define INITIAL_DELAY 60
#define INITIAL_DELAY_M1 59
#define TLINK_TIMEOUT 11
#define TLSU_TIMEOUT 65
#define INFINITY 999999
#define SPACEOUT 1

materialize(tLink, TLINK_TIMEOUT, infinity, keys(1, 2)).
//tLink(@Src, Next, Cost, SeqNum)

materialize(tLSU, TLSU_TIMEOUT, infinity, keys(1, 2, 3)).
// tLSU(@Local, Src, Next, Cost, SeqNum, TTL)

//////////////////////////////////////////////////////////////// Link injection

// If a link is inserted, issue a linkAdd event locally.
r11 eLinkAdd(@Src, Next, Cost):-
    link(@Src, Next, Cost),
    Src != Next.

//////////////////////////////////////////////////////////////// Link insertion

// Check if the link is new by join and count.
r33 eLinkCount(@Src, Next, Cost, a_COUNT<*>):-
    eLinkAdd(@Src, Next, Cost),
    tLink(@Src, Next, Cost_2, SeqNum).

// Insert if new link.
r34 tLink(@Src, Next, Cost, SeqNum):-
    eLinkCount(@Src, Next, Cost, Count),
    Count == 0,
    SeqNum := 0.

// Refresh
r35 tLink(@Src, Next, Cost, SeqNum):-
    eLinkAdd(@Src, Next, Cost),
    tLink(@Src, Next, Cost_2, SeqNum).

////////////////////////////////////////////////////////////////// Periodic update of LSUs (locally)

// Periodically send the links as LSUs locally.
r61A eLSU(@Src, Src, Next, Cost, SeqNum, TTL):-
     periodic(@Src, E, HSLS_PERIOD_2, 0, HSLS_PERIOD_1, SPACEOUT),
     tLink(@Src, Next, Cost, SeqNum),
     TTL := HSLS_TTL_1.

//Periodically increment the sequence numbers of all links.
r61B tLink(@Src, Next, Cost, SeqNumU):-
     periodic(@Src, E, HSLS_PERIOD_2, 0, HSLS_PERIOD_1_M1),
     tLink(@Src, Next, Cost, SeqNum),
     SeqNumU := SeqNum + 1.

// Periodically send the links as LSUs locally.
r62A eLSU(@Src, Src, Next, Cost, SeqNum, TTL):-
     periodic(@Src, E, HSLS_PERIOD_3, 0, HSLS_PERIOD_2, SPACEOUT),
     tLink(@Src, Next, Cost, SeqNum),
     TTL := HSLS_TTL_2.

// Periodically increment the sequence numbers of all links.
r62B  tLink(@Src, Next, Cost, SeqNumU):-
      periodic(@Src, E, HSLS_PERIOD_3, 0, HSLS_PERIOD_2_M1),
      tLink(@Src, Next, Cost, SeqNum),
      SeqNumU := SeqNum + 1.

// Periodically send the links as LSUs locally.
r63A eLSU(@Src, Src, Next, Cost, SeqNum, TTL):-
     periodic(@Src, E, HSLS_PERIOD_4, 0, HSLS_PERIOD_3, SPACEOUT),
     tLink(@Src, Next, Cost, SeqNum),
     TTL := HSLS_TTL_3.

// Periodically increment the sequence numbers of all links.
r63B tLink(@Src, Next, Cost, SeqNumU):-
     periodic(@Src, E, HSLS_PERIOD_4, 0, HSLS_PERIOD_3_M1),
     tLink(@Src, Next, Cost, SeqNum),
     SeqNumU := SeqNum + 1.

// Periodically send the links as LSUs locally.
r64A eLSU(@Src, Src, Next, Cost, SeqNum, TTL):-
     periodic(@Src, E, HSLS_PERIOD_5, 0, HSLS_PERIOD_4, SPACEOUT),
     tLink(@Src, Next, Cost, SeqNum),
     TTL := HSLS_TTL_4.

// Periodically increment the sequence numbers of all links.
r64B tLink(@Src, Next, Cost, SeqNumU):-
     periodic(@Src, E, HSLS_PERIOD_5, 0, HSLS_PERIOD_4_M1),
     tLink(@Src, Next, Cost, SeqNum),
     SeqNumU := SeqNum + 1.

// Triggered eLSU update
rAdd eLSU(@Src, Src, Next, Cost, SeqNum, TTL):-
     tLink(@Src, Next, Cost, SeqNum),
     SeqNum == 0,
     Now := f_now (),
     Period := HSLS_PERIOD_1,
     TTL := f_min (Now, Period). //f_min is actually for computing TTL

// Triggered eLSU delete
//rDel eLSU(@Src, Src, Next, Inf, SeqNum, TTL):-
//     delete tLink(@Src, Next, Cost, SeqNum_2),
//     Inf := INFINITY,
//     SeqNum := 0, //Don't care
//     Now := f_now (),
//     Period := HSLS_PERIOD_1,
//     TTL := f_min (Now, Period). //f_min is actually for computing TTL

////////////////////////////////////////////////////////////////// LSU insertion or update

// Replace broadcast address with current address
r70 eLSULoc(@Local, LastHop, Dst, Cost, SeqNum, TTL):-
    eLSU(@X, LastHop, Dst, Cost, SeqNum, TTL).

// Check if LSU is new by join and count.
r71 eLSUCount(@Src, LastHop, Dst, Cost, SeqNum, TTL, a_COUNT<*>):-
    eLSULoc(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2).

// Insert the LSU if new.
r72 tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL):-
    eLSUCount(@Src, LastHop, Dst, Cost, SeqNum, TTL, Count),
    Count == 0,
    Cost < INFINITY.

// If not new LSU but greater sequence number then update sequence number.
r73 tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL):-
    eLSULoc(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2),
    SeqNum > SeqNum_2,
    Cost < INFINITY.

// Explicit delete if the tLSU exists
r74 eLSUDel(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2):-
    eLSUCount(@Src, LastHop, Dst, Cost, SeqNum, TTL, Count),
    tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2),
    Count > 0,
    Cost == INFINITY.

r75 delete tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2):-
    eLSUDel(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2).

////////////////////////////////////////////////////////////////// Broadcast updates

// If LSU is updated then issue an LSUChange event.
r81 eLSUChange(@Src, LastHop, Dst, Cost, SeqNum, TTL):-
    tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL).

// If LSU changes then broadcast to all neighbors.
r82 eLSU(@Broadcast, LastHop, Dst, Cost, SeqNum, TTLU):-
    eLSUChange(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    TTL > 0,
    TTLU := TTL - 1.

// Broadcast the deletes
r83 eLSU(@Broadcast, LastHop, Dst, Cost_2, SeqNum_2, TTL_2):-
    eLSUDel(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2).
