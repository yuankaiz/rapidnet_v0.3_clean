/* A RapidNet application. Generated by RapidNet compiler. */

#include "dsr.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::dsr;

const string Dsr::EBESTPATHDST = "eBestPathDst";
const string Dsr::EPATHDST = "ePathDst";
const string Dsr::EPATHDSTLOC = "ePathDstLoc";
const string Dsr::EPATHSRC = "ePathSrc";
const string Dsr::EQUERY = "eQuery";
const string Dsr::LINK = "link";
const string Dsr::R23TPATHSEND = "r23tPathsend";
const string Dsr::TBESTPATH = "tBestPath";
const string Dsr::TBESTPATHDST = "tBestPathDst";
const string Dsr::TPATH = "tPath";
const string Dsr::TPATHDST = "tPathDst";

NS_LOG_COMPONENT_DEFINE ("Dsr");
NS_OBJECT_ENSURE_REGISTERED (Dsr);

TypeId
Dsr::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::dsr::Dsr")
    .SetParent<Discovery> ()
    .AddConstructor<Dsr> ()
    ;
  return tid;
}

Dsr::Dsr()
{
  NS_LOG_FUNCTION_NOARGS ();
}

Dsr::~Dsr()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
Dsr::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  Discovery::DoDispose ();
}

void
Dsr::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  Discovery::StartApplication ();
  RAPIDNET_LOG_INFO("Dsr Application Started");
}

void
Dsr::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  Discovery::StopApplication ();
  RAPIDNET_LOG_INFO("Dsr Application Stopped");
}

void
Dsr::InitDatabase ()
{
  //Discovery::InitDatabase ();

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr1", IPV4),
    attrdef ("link_attr2", IPV4)),
    Seconds (11));

  AddRelationWithKeys (TBESTPATH, attrdeflist (
    attrdef ("tBestPath_attr1", IPV4),
    attrdef ("tBestPath_attr2", IPV4)));

  AddRelationWithKeys (TBESTPATHDST, attrdeflist (
    attrdef ("tBestPathDst_attr1", IPV4),
    attrdef ("tBestPathDst_attr2", IPV4),
    attrdef ("tBestPathDst_attr3", IPV4)));

  AddRelationWithKeys (TPATH, attrdeflist (
    attrdef ("tPath_attr1", IPV4),
    attrdef ("tPath_attr2", IPV4),
    attrdef ("tPath_attr4", LIST)));

  AddRelationWithKeys (TPATHDST, attrdeflist (
    attrdef ("tPathDst_attr1", IPV4),
    attrdef ("tPathDst_attr2", IPV4),
    attrdef ("tPathDst_attr3", IPV4),
    attrdef ("tPathDst_attr5", LIST)));

  m_aggr_tbestpathdstMinCost = AggrMin::New (TBESTPATHDST,
    this,
    attrdeflist (
      attrdeftype ("tBestPathDst_attr1", ANYTYPE),
      attrdeftype ("tBestPathDst_attr2", ANYTYPE),
      attrdeftype ("tBestPathDst_attr3", ANYTYPE),
      attrdeftype ("tBestPathDst_attr4", ANYTYPE),
      attrdeftype ("tBestPathDst_attr5", ANYTYPE),
      attrdeftype ("tBestPathDst_attr6", ANYTYPE)),
    4);

  m_aggr_tbestpathMinCost = AggrMin::New (TBESTPATH,
    this,
    attrdeflist (
      attrdeftype ("tBestPath_attr1", ANYTYPE),
      attrdeftype ("tBestPath_attr2", ANYTYPE),
      attrdeftype ("tBestPath_attr3", ANYTYPE),
      attrdeftype ("tBestPath_attr4", ANYTYPE),
      attrdeftype ("tBestPath_attr5", ANYTYPE)),
    3);

}

void
Dsr::DemuxRecv (Ptr<Tuple> tuple)
{
  Discovery::DemuxRecv (tuple);

  if (IsRecvEvent (tuple, EQUERY))
    {
      R11_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPATHDST))
    {
      R12_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPATHDSTLOC))
    {
      R13_eca (tuple);
    }
  if (IsInsertEvent (tuple, TPATHDST))
    {
      R14eca (tuple);
    }
  if (IsDeleteEvent (tuple, TPATHDST))
    {
      R14eca2 (tuple);
    }
  if (IsInsertEvent (tuple, TBESTPATHDST))
    {
      R15Eca0Ins (tuple);
    }
  if (IsRecvEvent (tuple, EBESTPATHDST))
    {
      R16_eca (tuple);
    }
  if (IsRecvEvent (tuple, EBESTPATHDST))
    {
      R21_eca (tuple);
    }
  if (IsRecvEvent (tuple, EPATHSRC))
    {
      R22_eca (tuple);
    }
  if (IsRecvEvent (tuple, R23TPATHSEND))
    {
      R23ECAMat (tuple);
    }
  if (IsRecvEvent (tuple, EPATHSRC))
    {
      R23_eca (tuple);
    }
  if (IsInsertEvent (tuple, TPATH))
    {
      R31eca (tuple);
    }
  if (IsDeleteEvent (tuple, TPATH))
    {
      R31eca2 (tuple);
    }
}

void
Dsr::R11_eca (Ptr<Tuple> eQuery)
{
  RAPIDNET_LOG_INFO ("R11_eca triggered");

  Ptr<Tuple> result = eQuery;

  result->Assign (Assignor::New ("Cost",
    ValueExpr::New (Int32Value::New (0))));

  result->Assign (Assignor::New ("P_vec",
    FAppend::New (
      VarExpr::New ("eQuery_attr1"))));

  result->Assign (Assignor::New ("Pre",
    VarExpr::New ("eQuery_attr1")));

  result->Assign (Assignor::New ("Broadcast",
    BROADCAST_ADDRESS));

  result = result->Project (
    EPATHDST,
    strlist ("Broadcast",
      "eQuery_attr1",
      "eQuery_attr2",
      "Cost",
      "P_vec",
      "eQuery_attr3",
      "Pre",
      "Broadcast"),
    strlist ("ePathDst_attr1",
      "ePathDst_attr2",
      "ePathDst_attr3",
      "ePathDst_attr4",
      "ePathDst_attr5",
      "ePathDst_attr6",
      "ePathDst_attr7",
      RN_DEST));

  Send (result);
}

void
Dsr::R12_eca (Ptr<Tuple> ePathDst)
{
  RAPIDNET_LOG_INFO ("R12_eca triggered");

  Ptr<Tuple> result = ePathDst;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EPATHDSTLOC,
    strlist ("Local",
      "ePathDst_attr2",
      "ePathDst_attr3",
      "ePathDst_attr4",
      "ePathDst_attr5",
      "ePathDst_attr6",
      "ePathDst_attr7",
      "Local"),
    strlist ("ePathDstLoc_attr1",
      "ePathDstLoc_attr2",
      "ePathDstLoc_attr3",
      "ePathDstLoc_attr4",
      "ePathDstLoc_attr5",
      "ePathDstLoc_attr6",
      "ePathDstLoc_attr7",
      RN_DEST));

  Send (result);
}

void
Dsr::R13_eca (Ptr<Tuple> ePathDstLoc)
{
  RAPIDNET_LOG_INFO ("R13_eca triggered");

  Ptr<Tuple> result = ePathDstLoc;

  result->Assign (Assignor::New ("Cost_2",
    ValueExpr::New (Int32Value::New (1))));

  result->Assign (Assignor::New ("CostUpdate",
    Operation::New (RN_PLUS,
      VarExpr::New ("ePathDstLoc_attr4"),
      VarExpr::New ("Cost_2"))));

  result->Assign (Assignor::New ("P_vec_2",
    FAppend::New (
      VarExpr::New ("ePathDstLoc_attr1"))));

  result->Assign (Assignor::New ("P_vecUpdate",
    FConcat::New (
      VarExpr::New ("ePathDstLoc_attr5"),
      VarExpr::New ("P_vec_2"))));

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("ePathDstLoc_attr5"),
        VarExpr::New ("Local")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    TPATHDST,
    strlist ("Local",
      "ePathDstLoc_attr2",
      "ePathDstLoc_attr3",
      "CostUpdate",
      "P_vecUpdate",
      "ePathDstLoc_attr6"),
    strlist ("tPathDst_attr1",
      "tPathDst_attr2",
      "tPathDst_attr3",
      "tPathDst_attr4",
      "tPathDst_attr5",
      "tPathDst_attr6"));

  Insert (result);
}

void
Dsr::R14eca (Ptr<Tuple> tPathDst)
{
  RAPIDNET_LOG_INFO ("R14eca triggered");

  Ptr<Tuple> result = tPathDst;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    TBESTPATHDST,
    strlist ("Local",
      "tPathDst_attr2",
      "tPathDst_attr3",
      "tPathDst_attr4",
      "tPathDst_attr5",
      "tPathDst_attr6"),
    strlist ("tBestPathDst_attr1",
      "tBestPathDst_attr2",
      "tBestPathDst_attr3",
      "tBestPathDst_attr4",
      "tBestPathDst_attr5",
      "tBestPathDst_attr6"));

  m_aggr_tbestpathdstMinCost->Insert (result);
}

void
Dsr::R14eca2 (Ptr<Tuple> tPathDst)
{
  RAPIDNET_LOG_INFO ("R14eca2 triggered");

  Ptr<Tuple> result = tPathDst;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    TBESTPATHDST,
    strlist ("Local",
      "tPathDst_attr2",
      "tPathDst_attr3",
      "tPathDst_attr4",
      "tPathDst_attr5",
      "tPathDst_attr6"),
    strlist ("tBestPathDst_attr1",
      "tBestPathDst_attr2",
      "tBestPathDst_attr3",
      "tBestPathDst_attr4",
      "tBestPathDst_attr5",
      "tBestPathDst_attr6"));

  m_aggr_tbestpathdstMinCost->Delete (result);
}

void
Dsr::R15Eca0Ins (Ptr<Tuple> tBestPathDst)
{
  RAPIDNET_LOG_INFO ("R15Eca0Ins triggered");

  Ptr<Tuple> result = tBestPathDst;

  result->Assign (Assignor::New ("Local",
    LOCAL_ADDRESS));

  result = result->Project (
    EBESTPATHDST,
    strlist ("Local",
      "tBestPathDst_attr2",
      "tBestPathDst_attr3",
      "tBestPathDst_attr4",
      "tBestPathDst_attr5",
      "tBestPathDst_attr6"),
    strlist ("eBestPathDst_attr1",
      "eBestPathDst_attr2",
      "eBestPathDst_attr3",
      "eBestPathDst_attr4",
      "eBestPathDst_attr5",
      "eBestPathDst_attr6"));

  SendLocal (result);
}

void
Dsr::R16_eca (Ptr<Tuple> eBestPathDst)
{
  RAPIDNET_LOG_INFO ("R16_eca triggered");

  Ptr<Tuple> result = eBestPathDst;

  result->Assign (Assignor::New ("Pre",
    VarExpr::New ("eBestPathDst_attr1")));

  result->Assign (Assignor::New ("Broadcast",
    BROADCAST_ADDRESS));

  result = result->Select (Selector::New (
    Operation::New (RN_NEQ,
      VarExpr::New ("eBestPathDst_attr1"),
      VarExpr::New ("eBestPathDst_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_LT,
      FSize::New (
        VarExpr::New ("eBestPathDst_attr5")),
      ValueExpr::New (Int32Value::New (16)))));

  result = result->Project (
    EPATHDST,
    strlist ("Broadcast",
      "eBestPathDst_attr2",
      "eBestPathDst_attr3",
      "eBestPathDst_attr4",
      "eBestPathDst_attr5",
      "eBestPathDst_attr6",
      "Pre",
      "Broadcast"),
    strlist ("ePathDst_attr1",
      "ePathDst_attr2",
      "ePathDst_attr3",
      "ePathDst_attr4",
      "ePathDst_attr5",
      "ePathDst_attr6",
      "ePathDst_attr7",
      RN_DEST));

  Send (result);
}

void
Dsr::R21_eca (Ptr<Tuple> eBestPathDst)
{
  RAPIDNET_LOG_INFO ("R21_eca triggered");

  Ptr<Tuple> result = eBestPathDst;

  result->Assign (Assignor::New ("Temp_vec",
    VarExpr::New ("eBestPathDst_attr5")));

  result->Assign (Assignor::New ("P_track_vec",
    FRemoveLast::New (
      VarExpr::New ("Temp_vec"))));

  result->Assign (Assignor::New ("Pre",
    FLast::New (
      VarExpr::New ("P_track_vec"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("eBestPathDst_attr1"),
      VarExpr::New ("eBestPathDst_attr3"))));

  result = result->Project (
    EPATHSRC,
    strlist ("Pre",
      "P_track_vec",
      "eBestPathDst_attr5",
      "eBestPathDst_attr4",
      "eBestPathDst_attr6",
      "Pre"),
    strlist ("ePathSrc_attr1",
      "ePathSrc_attr2",
      "ePathSrc_attr3",
      "ePathSrc_attr4",
      "ePathSrc_attr5",
      RN_DEST));

  Send (result);
}

void
Dsr::R22_eca (Ptr<Tuple> ePathSrc)
{
  RAPIDNET_LOG_INFO ("R22_eca triggered");

  Ptr<Tuple> result = ePathSrc;

  result->Assign (Assignor::New ("Last",
    FLast::New (
      VarExpr::New ("ePathSrc_attr2"))));

  result->Assign (Assignor::New ("Temp_vec",
    VarExpr::New ("ePathSrc_attr2")));

  result->Assign (Assignor::New ("P_new_track_vec",
    FRemoveLast::New (
      VarExpr::New ("Temp_vec"))));

  result->Assign (Assignor::New ("Pre",
    FLast::New (
      VarExpr::New ("P_new_track_vec"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("ePathSrc_attr1"),
      VarExpr::New ("Last"))));

  result = result->Select (Selector::New (
    Operation::New (RN_GTE,
      FSize::New (
        VarExpr::New ("ePathSrc_attr2")),
      ValueExpr::New (Int32Value::New (2)))));

  result = result->Project (
    EPATHSRC,
    strlist ("Pre",
      "P_new_track_vec",
      "ePathSrc_attr3",
      "ePathSrc_attr4",
      "ePathSrc_attr5",
      "Pre"),
    strlist ("ePathSrc_attr1",
      "ePathSrc_attr2",
      "ePathSrc_attr3",
      "ePathSrc_attr4",
      "ePathSrc_attr5",
      RN_DEST));

  Send (result);
}

void
Dsr::R23ECAMat (Ptr<Tuple> r23tPathsend)
{
  RAPIDNET_LOG_INFO ("R23ECAMat triggered");

  Ptr<Tuple> result = r23tPathsend;

  result = result->Project (
    TPATH,
    strlist ("r23tPathsend_attr1",
      "r23tPathsend_attr2",
      "r23tPathsend_attr3",
      "r23tPathsend_attr4",
      "r23tPathsend_attr5"),
    strlist ("tPath_attr1",
      "tPath_attr2",
      "tPath_attr3",
      "tPath_attr4",
      "tPath_attr5"));

  Insert (result);
}

void
Dsr::R23_eca (Ptr<Tuple> ePathSrc)
{
  RAPIDNET_LOG_INFO ("R23_eca triggered");

  Ptr<Tuple> result = ePathSrc;

  result->Assign (Assignor::New ("Last",
    FLast::New (
      VarExpr::New ("ePathSrc_attr2"))));

  result->Assign (Assignor::New ("Src",
    VarExpr::New ("ePathSrc_attr1")));

  result->Assign (Assignor::New ("Dst",
    FLast::New (
      VarExpr::New ("ePathSrc_attr3"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      VarExpr::New ("ePathSrc_attr1"),
      VarExpr::New ("Last"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FSize::New (
        VarExpr::New ("ePathSrc_attr2")),
      ValueExpr::New (Int32Value::New (1)))));

  result = result->Project (
    R23TPATHSEND,
    strlist ("Src",
      "Dst",
      "ePathSrc_attr4",
      "ePathSrc_attr3",
      "ePathSrc_attr5",
      "Src"),
    strlist ("r23tPathsend_attr1",
      "r23tPathsend_attr2",
      "r23tPathsend_attr3",
      "r23tPathsend_attr4",
      "r23tPathsend_attr5",
      RN_DEST));

  Send (result);
}

void
Dsr::R31eca (Ptr<Tuple> tPath)
{
  RAPIDNET_LOG_INFO ("R31eca triggered");

  Ptr<Tuple> result = tPath;

  result = result->Project (
    TBESTPATH,
    strlist ("tPath_attr1",
      "tPath_attr2",
      "tPath_attr3",
      "tPath_attr4",
      "tPath_attr5"),
    strlist ("tBestPath_attr1",
      "tBestPath_attr2",
      "tBestPath_attr3",
      "tBestPath_attr4",
      "tBestPath_attr5"));

  m_aggr_tbestpathMinCost->Insert (result);
}

void
Dsr::R31eca2 (Ptr<Tuple> tPath)
{
  RAPIDNET_LOG_INFO ("R31eca2 triggered");

  Ptr<Tuple> result = tPath;

  result = result->Project (
    TBESTPATH,
    strlist ("tPath_attr1",
      "tPath_attr2",
      "tPath_attr3",
      "tPath_attr4",
      "tPath_attr5"),
    strlist ("tBestPath_attr1",
      "tBestPath_attr2",
      "tBestPath_attr3",
      "tBestPath_attr4",
      "tBestPath_attr5"));

  m_aggr_tbestpathMinCost->Delete (result);
}

