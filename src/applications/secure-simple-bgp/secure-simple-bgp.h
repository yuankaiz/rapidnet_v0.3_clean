/* A RapidNet application. Generated by RapidNet compiler. */

#ifndef SECURESIMPLEBGP_H
#define SECURESIMPLEBGP_H

#include <string>
#include <iostream>
#include "ns3/ptr.h"
#include "ns3/event-id.h"
#include "ns3/ipv4-address.h"
#include "ns3/rapidnet-header.h"
#include "ns3/relation-base.h"
#include "ns3/database.h"
#include "ns3/rapidnet-application-base.h"
#include "ns3/aggregator.h"
#include "ns3/aggwrap.h"

using namespace std;
using namespace ns3;

namespace ns3 {

class Socket;
class Packet;

namespace rapidnet {
namespace securesimplebgp {

class SecureSimpleBgp : public RapidNetApplicationBase
{
public:
  static const string ACCEPTROUTE;
  static const string ADVERTISE;
  static const string CARRYTRAFFIC;
  static const string NEIGHBOR;
  static const string ROUTE;

  static TypeId GetTypeId (void);

  SecureSimpleBgp ();

  virtual ~SecureSimpleBgp ();

protected:

  virtual void DoDispose (void);

  virtual void StartApplication (void);

  virtual void StopApplication (void);

  virtual void InitDatabase (void);

  virtual void DemuxRecv (Ptr<Tuple> tuple);

  virtual void Z1Eca0Ins (Ptr<Tuple> neighbor);

  virtual void Z1Eca0Del (Ptr<Tuple> neighbor);

  virtual void Z2_eca (Ptr<Tuple> advertise);

  virtual void Z3Eca0Ins (Ptr<Tuple> neighbor);

  virtual void Z3Eca1Ins (Ptr<Tuple> route);

  virtual void Z3Eca2Ins (Ptr<Tuple> carryTraffic);

};

} // namespace securesimplebgp
} // namespace rapidnet
} // namespace ns3

#endif // SECURESIMPLEBGP_H
