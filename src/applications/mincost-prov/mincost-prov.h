/* A RapidNet application. Generated by RapidNet compiler. */

#ifndef MINCOSTPROV_H
#define MINCOSTPROV_H

#include <string>
#include <iostream>
#include "ns3/ptr.h"
#include "ns3/event-id.h"
#include "ns3/ipv4-address.h"
#include "ns3/rapidnet-header.h"
#include "ns3/relation-base.h"
#include "ns3/database.h"
#include "ns3/rapidnet-application-base.h"
#include "ns3/aggregator.h"
#include "ns3/aggwrap.h"

using namespace std;
using namespace ns3;

namespace ns3 {

class Socket;
class Packet;

namespace rapidnet {
namespace mincostprov {

class MincostProv : public RapidNetApplicationBase
{
public:
  static const string BESTPATH;
  static const string EPRETURN;
  static const string EPROVQUERY;
  static const string ERRETURN;
  static const string ERULEQUERY;
  static const string EBESTPATH;
  static const string EBESTPATHDELETE;
  static const string EBESTPATHTEMP;
  static const string EBESTPATHTEMPDELETE;
  static const string EPATH;
  static const string EPATHDELETE;
  static const string EPATHTEMP;
  static const string EPATHTEMPDELETE;
  static const string LINK;
  static const string PITERATE;
  static const string PQLIST;
  static const string PRESULTTMP;
  static const string PRETURN;
  static const string PATH;
  static const string PROV;
  static const string PROVQUERY;
  static const string RITERATE;
  static const string RQLIST;
  static const string RRESULTTMP;
  static const string RRETURN;
  static const string RULEEXEC;
  static const string RULEQUERY;

  static TypeId GetTypeId (void);

  MincostProv ();

  virtual ~MincostProv ();

protected:

  virtual void DoDispose (void);

  virtual void StartApplication (void);

  virtual void StopApplication (void);

  virtual void InitDatabase (void);

  virtual void DemuxRecv (Ptr<Tuple> tuple);

  virtual void Prov_r1_1Eca0Ins (Ptr<Tuple> link);

  virtual void Prov_r1_1Eca0Del (Ptr<Tuple> link);

  virtual void Prov_r1_2_ecaAdd (Ptr<Tuple> epathTemp);

  virtual void Prov_r1_2_ecaDel (Ptr<Tuple> epathTempDelete);

  virtual void Prov_r1_3_ecaAdd (Ptr<Tuple> epathTemp);

  virtual void Prov_r1_3_ecaDel (Ptr<Tuple> epathTempDelete);

  virtual void Prov_r1_4_ecaAdd (Ptr<Tuple> epath);

  virtual void Prov_r1_4_ecaDel (Ptr<Tuple> epathDelete);

  virtual void Prov_r1_5_ecaAdd (Ptr<Tuple> epath);

  virtual void Prov_r1_5_ecaDel (Ptr<Tuple> epathDelete);

  virtual void Prov_r2_1Eca0Ins (Ptr<Tuple> link);

  virtual void Prov_r2_1Eca0Del (Ptr<Tuple> link);

  virtual void Prov_r2_1Eca3Ins (Ptr<Tuple> bestPath);

  virtual void Prov_r2_1Eca3Del (Ptr<Tuple> bestPath);

  virtual void Prov_r3_1Eca0Ins (Ptr<Tuple> bestPath);

  virtual void Prov_r3_1Eca0Del (Ptr<Tuple> bestPath);

  virtual void Prov_r3_2_ecaAdd (Ptr<Tuple> ebestPathTemp);

  virtual void Prov_r3_2_ecaDel (Ptr<Tuple> ebestPathTempDelete);

  virtual void Prov_r3_3_ecaAdd (Ptr<Tuple> ebestPathTemp);

  virtual void Prov_r3_3_ecaDel (Ptr<Tuple> ebestPathTempDelete);

  virtual void R3eca (Ptr<Tuple> path);

  virtual void R3eca2 (Ptr<Tuple> path);

  virtual void Prov_r3_5_ecaAdd (Ptr<Tuple> ebestPath);

  virtual void Prov_r3_5_ecaDel (Ptr<Tuple> ebestPathDelete);

  virtual void Prov_edb_1Eca1Ins (Ptr<Tuple> link);

  virtual void Prov_edb_1Eca1Del (Ptr<Tuple> link);

  virtual void Edb1_eca (Ptr<Tuple> provQuery);

  virtual void Idb1_eca (Ptr<Tuple> provQuery);

  virtual void Idb2_eca (Ptr<Tuple> provQuery);

  virtual void Idb3_eca (Ptr<Tuple> provQuery);

  virtual void Idb4_eca (Ptr<Tuple> pIterate);

  virtual void Idb5_eca (Ptr<Tuple> pIterate);

  virtual void Idb6_eca (Ptr<Tuple> eRuleQuery);

  virtual void Idb7_eca (Ptr<Tuple> rReturn);

  virtual void Idb8Eca0Ins (Ptr<Tuple> pResultTmp);

  virtual void Idb8Eca1Ins (Ptr<Tuple> pQList);

  virtual void Idb9_eca (Ptr<Tuple> ePReturn);

  virtual void Rv1_eca (Ptr<Tuple> ruleQuery);

  virtual void Rv2_eca (Ptr<Tuple> ruleQuery);

  virtual void Rv3_eca (Ptr<Tuple> ruleQuery);

  virtual void Rv4_eca (Ptr<Tuple> rIterate);

  virtual void Rv5_eca (Ptr<Tuple> rIterate);

  virtual void Rv6_eca (Ptr<Tuple> eProvQuery);

  virtual void Rv7_eca (Ptr<Tuple> pReturn);

  virtual void Rv8Eca0Ins (Ptr<Tuple> rResultTmp);

  virtual void Rv8Eca1Ins (Ptr<Tuple> rQList);

  virtual void Rv9_eca (Ptr<Tuple> eRReturn);

  Ptr<Aggregator> m_aggr_bestpathMinC;
};

} // namespace mincostprov
} // namespace rapidnet
} // namespace ns3

#endif // MINCOSTPROV_H
