// Linkstate periodic with triggered

#define LS_PERIOD 60
#define INITIAL_DELAY 60
#define INITIAL_DELAY_M1 59
#define TLINK_TIMEOUT 11
#define TLSU_TIMEOUT 65
#define INFINITY 999999
#define SPACEOUT 30
#define DISCOVERY_PERIOD 5

materialize(tLink, TLINK_TIMEOUT, infinity, keys(1, 2)).
//tLink(@Src, Next, Cost, SeqNum)

materialize(tLSU, TLSU_TIMEOUT, infinity, keys(1, 2, 3)).
// tLSU(@Local, Src, Next, Cost, SeqNum, TTL)

//apptable for application level filtering, it is hard state!
materialize(apptable, infinity, infinity, keys(1, 2)).
// apptable(Src, Next, Cost)

//////////////////////////////////////////////////////////////// Link injection

// Issue a linkAdd event locally for apptable entries with Src attribute as self.
// This is periodic because apptable is hard state and tLink is soft state
r11 eLinkAdd(@Src, Next, Cost):-
    periodic(@Src, E, DISCOVERY_PERIOD, 0, 0.5),
    apptable(@Src, Next, Cost),
    Src != Next.

//////////////////////////////////////////////////////////////// Link insertion

// Check if the link is new by join and count.
r33 eLinkCount(@Src, Next, Cost, a_COUNT<*>):-
    eLinkAdd(@Src, Next, Cost),
    tLink(@Src, Next, Cost_2, SeqNum).

// Insert if new link.
r34 tLink(@Src, Next, Cost, SeqNum):-
    eLinkCount(@Src, Next, Cost, Count),
    Count == 0,
    SeqNum := 0.

// Refresh
r35 tLink(@Src, Next, Cost, SeqNum):-
    eLinkAdd(@Src, Next, Cost),
    tLink(@Src, Next, Cost_2, SeqNum).

////////////////////////////////////////////////////////////////// Periodic update of LSUs (locally)

// Periodically send the links as LSUs locally.
r61A eLSU(@Src, Src, Src, Next, Cost, SeqNum, TTL):-
     periodic(@Src, E, LS_PERIOD, 0, INITIAL_DELAY, SPACEOUT),
     tLink(@Src, Next, Cost, SeqNum),
     TTL := INFINITY.

//Periodically increment the sequence numbers of all links.
r61B tLink(@Src, Next, Cost, SeqNumU):-
     periodic(@Src, E, LS_PERIOD, 0, INITIAL_DELAY_M1),
     tLink(@Src, Next, Cost, SeqNum),
     SeqNumU := SeqNum + 1.

// Triggered eLSU update
rAdd eLSU(@Src, Src, Src, Next, Cost, SeqNum, TTL):-
     tLink(@Src, Next, Cost, SeqNum),
     SeqNum == 0,
     TTL := INFINITY.

// Triggered eLSU delete
//rDel eLSU(@Src, Src, Src, Next, Inf, SeqNum, TTL):-
//     delete tLink(@Src, Next, Cost, SeqNum_2),
//     Inf := INFINITY,
//     SeqNum := 0, //Don't care
//     TTL := INFINITY.

////////////////////////////////////////////////////////////////// LSU insertion or update

// Replace broadcast address with current address
r70 eLSULoc(@Local, From, LastHop, Dst, Cost, SeqNum, TTL):-
    eLSU(@X, From, LastHop, Dst, Cost, SeqNum, TTL).

// Filter as per the apptable
rFilter eLSUFiltered(@Src, LastHop, Dst, Cost, SeqNum, TTL):- 
    eLSULoc(@Src, From, LastHop, Dst, Cost, SeqNum, TTL),
    apptable(@Src, From, Cost),
    Cost < INFINITY.

// Check if LSU is new by join and count.
r71 eLSUCount(@Src, LastHop, Dst, Cost, SeqNum, TTL, a_COUNT<*>):-
    eLSUFiltered(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2).

// Insert the LSU if new.
r72 tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL):-
    eLSUCount(@Src, LastHop, Dst, Cost, SeqNum, TTL, Count),
    Count == 0,
    Cost < INFINITY.

// If not new LSU but greater sequence number then update sequence number.
r73 tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL):-
    eLSUFiltered(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2),
    SeqNum > SeqNum_2,
    Cost < INFINITY.

// Explicit delete if the tLSU exists
r74 eLSUDel(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2):-
    eLSUCount(@Src, LastHop, Dst, Cost, SeqNum, TTL, Count),
    tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2),
    Count > 0,
    Cost == INFINITY.

r75 delete tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2):-
    eLSUDel(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2).

////////////////////////////////////////////////////////////////// Broadcast updates

// If LSU is updated then issue an LSUChange event.
r81 eLSUChange(@Src, LastHop, Dst, Cost, SeqNum, TTL):-
    tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL).

// If LSU changes then broadcast to all neighbors.
r82 eLSU(@Broadcast, Src, LastHop, Dst, Cost, SeqNum, TTLU):-
    eLSUChange(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    TTL > 0,
    TTLU := TTL - 1.

// Broadcast the deletes
r83 eLSU(@Broadcast, Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2):-
    eLSUDel(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2).
