/* A RapidNet application. Generated by RapidNet compiler. */

#ifndef SECUREPATHVECTOR_H
#define SECUREPATHVECTOR_H

#include <string>
#include <iostream>
#include "ns3/ptr.h"
#include "ns3/event-id.h"
#include "ns3/ipv4-address.h"
#include "ns3/rapidnet-header.h"
#include "ns3/relation-base.h"
#include "ns3/database.h"
#include "ns3/rapidnet-application-base.h"
#include "ns3/aggregator.h"
#include "ns3/aggwrap.h"

using namespace std;
using namespace ns3;

namespace ns3 {

class Socket;
class Packet;

namespace rapidnet {
namespace securepathvector {

class SecurePathvector : public RapidNetApplicationBase
{
public:
  static const string BESTPATH;
  static const string LINK;
  static const string LINKD;
  static const string LINKDDELETE;
  static const string PATH;
  static const string PATHDELETE;
  static const string R2LINKDSEND;
  static const string R3PATHSEND;

  static TypeId GetTypeId (void);

  SecurePathvector ();

  virtual ~SecurePathvector ();

protected:

  virtual void DoDispose (void);

  virtual void StartApplication (void);

  virtual void StopApplication (void);

  virtual void InitDatabase (void);

  virtual void DemuxRecv (Ptr<Tuple> tuple);

  virtual void R1Eca0Ins (Ptr<Tuple> link);

  virtual void R1Eca0Del (Ptr<Tuple> link);

  virtual void R2Eca0RemoteIns (Ptr<Tuple> r2linkDsend);

  virtual void R2Eca0RemoteDel (Ptr<Tuple> linkDDelete);

  virtual void R2Eca0Ins (Ptr<Tuple> link);

  virtual void R2Eca0Del (Ptr<Tuple> link);

  virtual void R3Eca0RemoteIns (Ptr<Tuple> r3pathsend);

  virtual void R3Eca0RemoteDel (Ptr<Tuple> pathDelete);

  virtual void R3Eca0Ins (Ptr<Tuple> linkD);

  virtual void R3Eca0Del (Ptr<Tuple> linkD);

  virtual void R3Eca1Ins (Ptr<Tuple> bestPath);

  virtual void R3Eca1Del (Ptr<Tuple> bestPath);

  virtual void R4eca (Ptr<Tuple> path);

  virtual void R4eca2 (Ptr<Tuple> path);

  Ptr<Aggregator> m_aggr_bestpathMinC;
};

} // namespace securepathvector
} // namespace rapidnet
} // namespace ns3

#endif // SECUREPATHVECTOR_H
