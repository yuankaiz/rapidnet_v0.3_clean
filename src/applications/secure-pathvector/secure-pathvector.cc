/* A RapidNet application. Generated by RapidNet compiler. */

#include "secure-pathvector.h"
#include <cstdlib>
#include "ns3/nstime.h"
#include "ns3/simulator.h"
#include "ns3/type-ids.h"
#include "ns3/rapidnet-types.h"
#include "ns3/rapidnet-utils.h"
#include "ns3/assignor.h"
#include "ns3/selector.h"
#include "ns3/rapidnet-functions.h"

using namespace std;
using namespace ns3;
using namespace ns3::rapidnet;
using namespace ns3::rapidnet::securepathvector;

const string SecurePathvector::BESTPATH = "bestPath";
const string SecurePathvector::LINK = "link";
const string SecurePathvector::LINKD = "linkD";
const string SecurePathvector::LINKDDELETE = "linkDDelete";
const string SecurePathvector::PATH = "path";
const string SecurePathvector::PATHDELETE = "pathDelete";
const string SecurePathvector::R2LINKDSEND = "r2linkDsend";
const string SecurePathvector::R3PATHSEND = "r3pathsend";

NS_LOG_COMPONENT_DEFINE ("SecurePathvector");
NS_OBJECT_ENSURE_REGISTERED (SecurePathvector);

TypeId
SecurePathvector::GetTypeId (void)
{
  static TypeId tid = TypeId ("ns3::rapidnet::securepathvector::SecurePathvector")
    .SetParent<RapidNetApplicationBase> ()
    .AddConstructor<SecurePathvector> ()
    ;
  return tid;
}

SecurePathvector::SecurePathvector()
{
  NS_LOG_FUNCTION_NOARGS ();
}

SecurePathvector::~SecurePathvector()
{
  NS_LOG_FUNCTION_NOARGS ();
}

void
SecurePathvector::DoDispose (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::DoDispose ();
}

void
SecurePathvector::StartApplication (void)
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StartApplication ();
  SendlogInit ();
  RAPIDNET_LOG_INFO("SecurePathvector Application Started");
}

void
SecurePathvector::StopApplication ()
{
  NS_LOG_FUNCTION_NOARGS ();

  RapidNetApplicationBase::StopApplication ();
  RAPIDNET_LOG_INFO("SecurePathvector Application Stopped");
}

void
SecurePathvector::InitDatabase ()
{
  //RapidNetApplicationBase::InitDatabase ();

  AddRelationWithKeys (BESTPATH, attrdeflist (
    attrdef ("bestPath_attr2", IPV4)));

  AddRelationWithKeys (LINK, attrdeflist (
    attrdef ("link_attr1", IPV4),
    attrdef ("link_attr2", IPV4)));

  AddRelationWithKeys (LINKD, attrdeflist (
    attrdef ("linkD_attr1", IPV4),
    attrdef ("linkD_attr2", IPV4)));

  AddRelationWithKeys (PATH, attrdeflist (
    attrdef ("path_attr4", LIST)));

  m_aggr_bestpathMinC = AggrMin::New (BESTPATH,
    this,
    attrdeflist (
      attrdeftype ("bestPath_attr1", ANYTYPE),
      attrdeftype ("bestPath_attr2", ANYTYPE),
      attrdeftype ("bestPath_attr3", ANYTYPE),
      attrdeftype ("bestPath_attr4", ANYTYPE)),
    3);

}

void
SecurePathvector::DemuxRecv (Ptr<Tuple> tuple)
{
  RapidNetApplicationBase::DemuxRecv (tuple);

  if (IsInsertEvent (tuple, LINK))
    {
      R1Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      R1Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, R2LINKDSEND))
    {
      R2Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, LINKDDELETE))
    {
      R2Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, LINK))
    {
      R2Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINK))
    {
      R2Eca0Del (tuple);
    }
  if (IsRecvEvent (tuple, R3PATHSEND))
    {
      R3Eca0RemoteIns (tuple);
    }
  if (IsRecvEvent (tuple, PATHDELETE))
    {
      R3Eca0RemoteDel (tuple);
    }
  if (IsInsertEvent (tuple, LINKD))
    {
      R3Eca0Ins (tuple);
    }
  if (IsDeleteEvent (tuple, LINKD))
    {
      R3Eca0Del (tuple);
    }
  if (IsInsertEvent (tuple, BESTPATH))
    {
      R3Eca1Ins (tuple);
    }
  if (IsDeleteEvent (tuple, BESTPATH))
    {
      R3Eca1Del (tuple);
    }
  if (IsInsertEvent (tuple, PATH))
    {
      R4eca (tuple);
    }
  if (IsDeleteEvent (tuple, PATH))
    {
      R4eca2 (tuple);
    }
}

void
SecurePathvector::R1Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R1Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("link_attr1"))));

  result->Assign (Assignor::New ("P2",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("P2"))));

  result = result->Project (
    PATH,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3",
      "P"),
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"));

  Insert (result);
}

void
SecurePathvector::R1Eca0Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R1Eca0Del triggered");

  Ptr<Tuple> result = link;

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("link_attr1"))));

  result->Assign (Assignor::New ("P2",
    FAppend::New (
      VarExpr::New ("link_attr2"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("P2"))));

  result = result->Project (
    PATH,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3",
      "P"),
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"));

  Delete (result);
}

void
SecurePathvector::R2Eca0RemoteIns (Ptr<Tuple> r2linkDsend)
{
  RAPIDNET_LOG_INFO ("R2Eca0RemoteIns triggered");

  if(!Verify (r2linkDsend, "r2linkDsend_attr1"))
    {
      RAPIDNET_LOG_WARN ("Verification failed!\n");
      return;
    }

  Ptr<Tuple> result = r2linkDsend;

  result = result->Project (
    LINKD,
    strlist ("r2linkDsend_attr1",
      "r2linkDsend_attr2",
      "r2linkDsend_attr3"),
    strlist ("linkD_attr1",
      "linkD_attr2",
      "linkD_attr3"));

  Insert (result);
}

void
SecurePathvector::R2Eca0RemoteDel (Ptr<Tuple> linkDDelete)
{
  RAPIDNET_LOG_INFO ("R2Eca0RemoteDel triggered");

  if(!Verify (linkDDelete, "linkDDelete_attr1"))
    {
      RAPIDNET_LOG_WARN ("Verification failed!\n");
      return;
    }

  Ptr<Tuple> result = linkDDelete;

  result = result->Project (
    LINKD,
    strlist ("linkDDelete_attr1",
      "linkDDelete_attr2",
      "linkDDelete_attr3"),
    strlist ("linkD_attr1",
      "linkD_attr2",
      "linkD_attr3"));

  Delete (result);
}

void
SecurePathvector::R2Eca0Ins (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R2Eca0Ins triggered");

  Ptr<Tuple> result = link;

  result = result->Project (
    R2LINKDSEND,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3",
      "link_attr2"),
    strlist ("r2linkDsend_attr1",
      "r2linkDsend_attr2",
      "r2linkDsend_attr3",
      RN_DEST));

  Sign (result);
  result = Encrypt (result, "r2linkDsend_attr2"); 
  Send (result);
}

void
SecurePathvector::R2Eca0Del (Ptr<Tuple> link)
{
  RAPIDNET_LOG_INFO ("R2Eca0Del triggered");

  Ptr<Tuple> result = link;

  result = result->Project (
    LINKDDELETE,
    strlist ("link_attr1",
      "link_attr2",
      "link_attr3",
      "link_attr2"),
    strlist ("linkDDelete_attr1",
      "linkDDelete_attr2",
      "linkDDelete_attr3",
      RN_DEST));

  Sign (result);
  result = Encrypt (result, "linkDDelete_attr2"); 
  Send (result);
}

void
SecurePathvector::R3Eca0RemoteIns (Ptr<Tuple> r3pathsend)
{
  RAPIDNET_LOG_INFO ("R3Eca0RemoteIns triggered");

  if(!Verify (r3pathsend, "r3pathsend_attr5"))
    {
      RAPIDNET_LOG_WARN ("Verification failed!\n");
      return;
    }

  Ptr<Tuple> result = r3pathsend;

  result = result->Project (
    PATH,
    strlist ("r3pathsend_attr1",
      "r3pathsend_attr2",
      "r3pathsend_attr3",
      "r3pathsend_attr4",
      "r3pathsend_attr5"),
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4",
      "path_attr5"));

  Insert (result);
}

void
SecurePathvector::R3Eca0RemoteDel (Ptr<Tuple> pathDelete)
{
  RAPIDNET_LOG_INFO ("R3Eca0RemoteDel triggered");

  if(!Verify (pathDelete, "pathDelete_attr5"))
    {
      RAPIDNET_LOG_WARN ("Verification failed!\n");
      return;
    }

  Ptr<Tuple> result = pathDelete;

  result = result->Project (
    PATH,
    strlist ("pathDelete_attr1",
      "pathDelete_attr2",
      "pathDelete_attr3",
      "pathDelete_attr4",
      "pathDelete_attr5"),
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4",
      "path_attr5"));

  Delete (result);
}

void
SecurePathvector::R3Eca0Ins (Ptr<Tuple> linkD)
{
  RAPIDNET_LOG_INFO ("R3Eca0Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (BESTPATH)->Join (
    linkD,
    strlist ("bestPath_attr1"),
    strlist ("linkD_attr2"));

  result->Assign (Assignor::New ("C",
    Operation::New (RN_PLUS,
      VarExpr::New ("linkD_attr3"),
      VarExpr::New ("bestPath_attr3"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("linkD_attr1"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("bestPath_attr4"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("bestPath_attr4"),
        VarExpr::New ("linkD_attr1")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    R3PATHSEND,
    strlist ("linkD_attr1",
      "bestPath_attr2",
      "C",
      "P",
      "linkD_attr2",
      "linkD_attr1"),
    strlist ("r3pathsend_attr1",
      "r3pathsend_attr2",
      "r3pathsend_attr3",
      "r3pathsend_attr4",
      "r3pathsend_attr5",
      RN_DEST));

  Sign (result);
  result = Encrypt (result, "r3pathsend_attr1"); 
  Send (result);
}

void
SecurePathvector::R3Eca0Del (Ptr<Tuple> linkD)
{
  RAPIDNET_LOG_INFO ("R3Eca0Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (BESTPATH)->Join (
    linkD,
    strlist ("bestPath_attr1"),
    strlist ("linkD_attr2"));

  result->Assign (Assignor::New ("C",
    Operation::New (RN_PLUS,
      VarExpr::New ("linkD_attr3"),
      VarExpr::New ("bestPath_attr3"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("linkD_attr1"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("bestPath_attr4"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("bestPath_attr4"),
        VarExpr::New ("linkD_attr1")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PATHDELETE,
    strlist ("linkD_attr1",
      "bestPath_attr2",
      "C",
      "P",
      "linkD_attr2",
      "linkD_attr1"),
    strlist ("pathDelete_attr1",
      "pathDelete_attr2",
      "pathDelete_attr3",
      "pathDelete_attr4",
      "pathDelete_attr5",
      RN_DEST));

  Sign (result);
  result = Encrypt (result, "pathDelete_attr1"); 
  Send (result);
}

void
SecurePathvector::R3Eca1Ins (Ptr<Tuple> bestPath)
{
  RAPIDNET_LOG_INFO ("R3Eca1Ins triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINKD)->Join (
    bestPath,
    strlist ("linkD_attr2"),
    strlist ("bestPath_attr1"));

  result->Assign (Assignor::New ("C",
    Operation::New (RN_PLUS,
      VarExpr::New ("linkD_attr3"),
      VarExpr::New ("bestPath_attr3"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("linkD_attr1"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("bestPath_attr4"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("bestPath_attr4"),
        VarExpr::New ("linkD_attr1")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    R3PATHSEND,
    strlist ("linkD_attr1",
      "bestPath_attr2",
      "C",
      "P",
      "bestPath_attr1",
      "linkD_attr1"),
    strlist ("r3pathsend_attr1",
      "r3pathsend_attr2",
      "r3pathsend_attr3",
      "r3pathsend_attr4",
      "r3pathsend_attr5",
      RN_DEST));

  Sign (result);
  result = Encrypt (result, "r3pathsend_attr1"); 
  Send (result);
}

void
SecurePathvector::R3Eca1Del (Ptr<Tuple> bestPath)
{
  RAPIDNET_LOG_INFO ("R3Eca1Del triggered");

  Ptr<RelationBase> result;

  result = GetRelation (LINKD)->Join (
    bestPath,
    strlist ("linkD_attr2"),
    strlist ("bestPath_attr1"));

  result->Assign (Assignor::New ("C",
    Operation::New (RN_PLUS,
      VarExpr::New ("linkD_attr3"),
      VarExpr::New ("bestPath_attr3"))));

  result->Assign (Assignor::New ("P1",
    FAppend::New (
      VarExpr::New ("linkD_attr1"))));

  result->Assign (Assignor::New ("P",
    FConcat::New (
      VarExpr::New ("P1"),
      VarExpr::New ("bestPath_attr4"))));

  result = result->Select (Selector::New (
    Operation::New (RN_EQ,
      FMember::New (
        VarExpr::New ("bestPath_attr4"),
        VarExpr::New ("linkD_attr1")),
      ValueExpr::New (Int32Value::New (0)))));

  result = result->Project (
    PATHDELETE,
    strlist ("linkD_attr1",
      "bestPath_attr2",
      "C",
      "P",
      "bestPath_attr1",
      "linkD_attr1"),
    strlist ("pathDelete_attr1",
      "pathDelete_attr2",
      "pathDelete_attr3",
      "pathDelete_attr4",
      "pathDelete_attr5",
      RN_DEST));

  Sign (result);
  result = Encrypt (result, "pathDelete_attr1"); 
  Send (result);
}

void
SecurePathvector::R4eca (Ptr<Tuple> path)
{
  RAPIDNET_LOG_INFO ("R4eca triggered");

  Ptr<Tuple> result = path;

  result = result->Project (
    BESTPATH,
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"),
    strlist ("bestPath_attr1",
      "bestPath_attr2",
      "bestPath_attr3",
      "bestPath_attr4"));

  m_aggr_bestpathMinC->Insert (result);
}

void
SecurePathvector::R4eca2 (Ptr<Tuple> path)
{
  RAPIDNET_LOG_INFO ("R4eca2 triggered");

  Ptr<Tuple> result = path;

  result = result->Project (
    BESTPATH,
    strlist ("path_attr1",
      "path_attr2",
      "path_attr3",
      "path_attr4"),
    strlist ("bestPath_attr1",
      "bestPath_attr2",
      "bestPath_attr3",
      "bestPath_attr4"));

  m_aggr_bestpathMinC->Delete (result);
}

