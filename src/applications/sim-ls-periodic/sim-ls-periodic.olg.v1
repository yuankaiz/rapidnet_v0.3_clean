// Linkstate periodic

#define LS_PERIOD 60
#define INITIAL_DELAY 60
#define INITIAL_DELAY_M1 59
#define TLINK_TIMEOUT 11
#define TLSU_TIMEOUT 65
#define INFINITY 999999
#define SPACEOUT 1

materialize(tLink, TLINK_TIMEOUT, infinity, keys(1, 2)).
//tLink(@Src, Next, Cost, SeqNum)

materialize(tLSU, TLSU_TIMEOUT, infinity, keys(1, 2, 3)).
// tLSU(@Local, Src, Next, Cost, SeqNum, TTL)

//////////////////////////////////////////////////////////////// Link injection

// If a link is inserted, issue a linkAdd event locally.
r11 eLinkAdd(@Src, Next, Cost):-
    link(@Src, Next, Cost),
    Src != Next.

//////////////////////////////////////////////////////////////// Link insertion

// Check if the link is new by join and count.
r33 eLinkCount(@Src, Next, Cost, a_COUNT<*>):-
    eLinkAdd(@Src, Next, Cost),
    tLink(@Src, Next, Cost_2, SeqNum).

// Insert if new link.
r34 tLink(@Src, Next, Cost, SeqNum):-
    eLinkCount(@Src, Next, Cost, Count),
    Count == 0,
    SeqNum := 0.

// Refresh
r35 tLink(@Src, Next, Cost, SeqNum):-
    eLinkAdd(@Src, Next, Cost),
    tLink(@Src, Next, Cost_2, SeqNum).

////////////////////////////////////////////////////////////////// Periodic update of LSUs (locally)

// Periodically send the links as LSUs locally.
r61A eLSU(@Src, Src, Next, Cost, SeqNum, TTL):-
     periodic(@Src, E, LS_PERIOD, 0, INITIAL_DELAY, SPACEOUT),
     tLink(@Src, Next, Cost, SeqNum),
     TTL := INFINITY.

//Periodically increment the sequence numbers of all links.
r61B tLink(@Src, Next, Cost, SeqNumU):-
     periodic(@Src, E, LS_PERIOD, 0, INITIAL_DELAY_M1),
     tLink(@Src, Next, Cost, SeqNum),
     SeqNumU := SeqNum + 1.

////////////////////////////////////////////////////////////////// LSU insertion or update

// Replace broadcast address with current address
r70 eLSULoc(@Local, LastHop, Dst, Cost, SeqNum, TTL):-
    eLSU(@X, LastHop, Dst, Cost, SeqNum, TTL).

// Check if LSU is new by join and count.
r71 eLSUCount(@Src, LastHop, Dst, Cost, SeqNum, TTL, a_COUNT<*>):-
    eLSULoc(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2).

// Insert the LSU if new.
r72 tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL):-
    eLSUCount(@Src, LastHop, Dst, Cost, SeqNum, TTL, Count),
    Count == 0.

// If not new LSU but greater sequence number then update sequence number.
r73 tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL):-
    eLSULoc(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    tLSU(@Src, LastHop, Dst, Cost_2, SeqNum_2, TTL_2),
    SeqNum > SeqNum_2.

////////////////////////////////////////////////////////////////// Broadcast updates

// If LSU is updated then issue an LSUChange event.
r81 eLSUChange(@Src, LastHop, Dst, Cost, SeqNum, TTL):-
    tLSU(@Src, LastHop, Dst, Cost, SeqNum, TTL).

// If LSU changes then broadcast to all neighbors.
r82 eLSU(@Broadcast, LastHop, Dst, Cost, SeqNum, TTLU):-
    eLSUChange(@Src, LastHop, Dst, Cost, SeqNum, TTL),
    TTL > 0,
    TTLU := TTL - 1.

